# Phoenix Human GRCh38 pipeline

# The config variables includes an array of dataFiles. Here we
# need to group the data files into read groups, and then group 
# read_groups into samples. This will make it easier to add tasks
# later in the pipeline. The resulting samples dict will look
# like this:
 
# sampleMergeKey/sampleName:
#   glPrep: RNA
#   glType: RNA
#       ... 
#   read_groups: 
#     C140KACXX_7_TAGCTT:
#       glPrep: RNA
#       glType: RNA
#           ...
#       data_files: 
#         - 
#           fastqPath: .../MMRF_1157_1_BM_CD138pos_T2_TSMRU_K03096_C140KACXX_TAGCTT_L007_R1_001.fastq.gz
#           fastqCode: R1
#           glPrep: RNA
#           glType: RNA
#               ...
#         - 
#           fastqPath: .../MMRF_1157_1_BM_CD138pos_T2_TSMRU_K03096_C140KACXX_TAGCTT_L007_R2_001.fastq.gz
#           fastqCode: R2
#           glPrep: RNA
#           glType: RNA
#               ...

{# Setting debug to True retains many of the intermediate files #}
{% if debug is not defined %}{% set debug = False %}{% endif %}
{# Tasks contains switches for toggling many of the features #}
{% if tasks is not defined %}{% set tasks = {} %}{% endif %}

{% set samples = {} %}
{% for file in dataFiles %}
    {% do file.update({'glType': file.glType.lower()}) %}
    {% if 'sampleMergeKey' in file %}
        {% set name = file.sampleMergeKey %}
    {% else %}
        {% set name = file.sampleName %}
    {% endif %}
    {% if name not in samples %}
        {% do samples.update({name: {}}) %}
        {% do samples[name].update(file) %}
        {% do samples[name].update({"name": name}) %}
    {% endif %}
{% endfor %}

{% for rgid, data_files in dataFiles | groupby('rgid') %}
    {% set rg = data_files|first %}
    {% if 'sampleMergeKey' in rg %}
        {% set name = rg.sampleMergeKey %}
    {% else %}
        {% set name = rg.sampleName %}
    {% endif %}
    {% if not 'read_groups' in samples[name] %}
        {% do samples[name].update({'read_groups': {}}) %}
    {% endif %}
    {% do samples[name]['read_groups'].update({rgid: {}}) %}
    {% do samples[name]['read_groups'][rgid].update(rg) %}
    {% do samples[name]['read_groups'][rgid].update({'data_files': data_files}) %}
{% endfor %}

# Setup capture kit props for exome samples
{% for sample in samples.values() if sample.glType == 'exome' %}
    {% do sample.update({'library_code': sample.assayCode[0:2]|upper}) %}
    {% do sample.update({'capture_kit_code': sample.assayCode[2:5]|upper}) %}
    {% if sample.capture_kit_code in constants.phoenix.capture_kits %}
        {% do sample.update({'capture_kit': constants.phoenix.capture_kits[sample.capture_kit_code]}) %}
    {% else %}
        {% do sample.update({'capture_kit': constants.phoenix.capture_kits['default']}) %}
    {% endif %}
{% endfor %}

# Start of module imports
{% from 'modules/dna_alignment/main.jst' import dna_alignment with context %}
{% from 'modules/germline_variant_calling/main.jst' import germline_variant_calling with context %}
{% from 'modules/somatic_variant_calling/main.jst' import somatic_variant_calling with context %}
{% from 'modules/rna_quant/main.jst' import rna_quant with context %}
{% from 'modules/rna_fusion_detection/main.jst' import rna_fusion_detection with context %}


{% for batch in dataFiles|batch(4) %}
- name: copy_fastqs_{{ loop.index }}
  output:
    {% for fq in batch %}
    - temp/fastqs/{{ fq.fastqPath|basename }}
    {% endfor %}
  tags: [rsync,]
  retry: 2
  cpus: 1
  walltime: "1:00:00"
  cmd: |
    set -uev

    mkdir -p temp/fastqs/

    {% for fq in batch %}
    rsync_from_isilon "{{ fq.fastqPath }}" "temp/fastqs/"
    {% endfor %}

{% endfor %}

# Start of module calls
{{ dna_alignment(samples) }}
{{ germline_variant_calling(samples) }}
{{ somatic_variant_calling(samples) }}
{{ rna_quant(samples) }}
{{ rna_fusion_detection(samples) }}
