# Phoenix Human GRCh38 pipeline
#
# The config variables includes an array of dataFiles. Here we
# need to group the data files into read groups, and then group 
# read_groups into samples. This will make it easier to add tasks
# later in the pipeline. The resulting samples dict will look
# like this:
# 
# sampleMergeKey/sampleName:
#   glPrep: RNA
#   glType: RNA
#       ... 
#   read_groups: 
#     C140KACXX_7_TAGCTT:
#       glPrep: RNA
#       glType: RNA
#           ...
#       data_files: 
#         - 
#           fastqPath: .../MMRF_1157_1_BM_CD138pos_T2_TSMRU_K03096_C140KACXX_TAGCTT_L007_R1_001.fastq.gz
#           fastqCode: R1
#           glPrep: RNA
#           glType: RNA
#               ...
#         - 
#           fastqPath: .../MMRF_1157_1_BM_CD138pos_T2_TSMRU_K03096_C140KACXX_TAGCTT_L007_R2_001.fastq.gz
#           fastqCode: R2
#           glPrep: RNA
#           glType: RNA
#               ...

{# Setting debug to True retains many of the intermediate files #}
{% if debug is not defined %}
    {% set debug = False %}
{% endif %}

{# Tasks contains switches for toggling many of the features #}
{% if tasks is not defined %}
    {% set tasks = {} %}
{% endif %}

{# submissionSource toggles specific tasks based on how they were submitted #}
{% if submissionSource is not defined %}
    {% set submissionSource = "unknown" %}
{% endif %}

{% from 'modules/dna_alignment/main.jst' import dna_alignment with context %}
{% from 'modules/constitutional/main.jst' import constitutional_variant_calling with context %}
{% from 'modules/somatic/main.jst' import somatic_variant_calling with context %}
{% from 'modules/rna/main.jst' import rna_quant with context %}
{% from 'modules/rna/main.jst' import rna_fusion_detection with context %}
{% from 'modules/single_cell/main.jst' import single_cell_rna with context %}

{% set samples = {} %}
{% for file in dataFiles %}
    {% set bn = file.fastqPath | basename %}

    {% if 'sampleMergeKey' in file %}
        {% set name = file.sampleMergeKey %}
    {% else %}
        {% set name = file.sampleName %}
    {% endif %}

    {% do file.update({'name': name}) %}
    {% do file.update({'basename': bn}) %}
    {% do file.update({'gltype': file.glType.lower()}) %}
    {% do file.update({'glprep': file.glPrep.lower()}) %}

    {% if 'subGroup' not in file %}
        {% do file.update({'subGroup': 'constitutional'}) %}
    {% endif %}

    {% if name not in samples %}
        {% do samples.update({name: {}}) %}
        {% do samples[name].update(file) %}
        {% do samples[name].update({"name": name}) %}
    {% endif %}
{% endfor %}

{% for rgid, data_files in dataFiles | groupby('rgid') %}
    {% set rg = data_files|first %}

    {% if 'sampleMergeKey' in rg %}
        {% set name = rg.sampleMergeKey %}
    {% else %}
        {% set name = rg.sampleName %}
    {% endif %}
    {% if not 'read_groups' in samples[name] %}
        {% do samples[name].update({'read_groups': {}}) %}
    {% endif %}

    {% do samples[name]['read_groups'].update({rgid: {}}) %}
    {% do samples[name]['read_groups'][rgid].update(rg) %}
    {% do samples[name]['read_groups'][rgid].update({'data_files': data_files}) %}
{% endfor %}

{# Setup calculated props for samples #}
{% for sample in samples.values() if sample.gltype == 'exome' %}
    {% do sample.update({'library_code': sample.assayCode[0:2]|upper}) %}
    {% do sample.update({'capture_kit_code': sample.assayCode[2:5]|upper}) %}

    {% set targets_interval_list %}{{ constants.phoenix.capture_kit_path }}/{{ sample.capture_kit_code }}/{{ sample.capture_kit_code }}_{{ constants.phoenix.genome_subversion_name }}_{{ constants.phoenix.gene_model_name }}.targets.interval_list{% endset %}
    {% set no_header_targets_interval_list %}{{ constants.phoenix.capture_kit_path }}/{{ sample.capture_kit_code }}/{{ sample.capture_kit_code }}_{{ constants.phoenix.genome_subversion_name }}_{{ constants.phoenix.gene_model_name }}.no.header.targets.interval_list{% endset %}
    {% set baits_interval_list %}{{ constants.phoenix.capture_kit_path }}/{{ sample.capture_kit_code }}/{{ sample.capture_kit_code }}_{{ constants.phoenix.genome_subversion_name }}_{{ constants.phoenix.gene_model_name }}.baits.interval_list{% endset %}
    {% set extended_bed %}{{ constants.phoenix.capture_kit_path }}/{{ sample.capture_kit_code }}/{{ sample.capture_kit_code }}_{{ constants.phoenix.genome_subversion_name }}_{{ constants.phoenix.gene_model_name }}.extended.bed{% endset %}

    {% do sample.update({'capture_kit': {}}) %}
    {% do sample['capture_kit'].update({'targets_interval_list': targets_interval_list}) %}
    {% do sample['capture_kit'].update({'no_header_targets_interval_list': no_header_targets_interval_list}) %}
    {% do sample['capture_kit'].update({'baits_interval_list': baits_interval_list}) %}
    {% do sample['capture_kit'].update({'extended_bed': extended_bed}) %}
{% endfor %}

{% for sample in samples.values() if sample.gltype == 'rna' %}
    {% set readOrientation=sample.readOrientation|default('inward')|lower %}
    {% set rnaStrandType=sample.rnaStrandType|default('unstranded')|lower %}
    {% set rnaStrandDirection=sample.rnaStrandDirection|default('notapplicable')|lower %}
    {% set strandedness %}{{ readOrientation }}-{{ rnaStrandType }}-{{ rnaStrandDirection }}{% endset %}
    {% do sample.update({'strandedness': strandedness}) %}
{% endfor %}

{% if debug %}
    {{ log(samples|tojson(indent=4), level='CRITICAL') }}
{% endif %}

{# Move to utility scripts #}
{% for fastq in dataFiles %}
- name: copy_fastqs_{{ loop.index }}
  output: ./temp/fastqs/{{ fastq.basename }}
  tags: [rsync,]
  sbatch_args: ['-p', 'isilon']
  retry: 2
  cpus: 6
  walltime: "4:00:00"
  cloud_args:
    local_task: True
  cmd: |
    set -uev

    mkdir -p temp/fastqs/

    rsync "{{ fastq.fastqPath }}" "temp/fastqs/"

{% endfor %}

{# Move to utility scripts #}
- name: finalize
  after-re: .*
  cpus: 1
  walltime: "4:00:00"
  cloud_args:
    local_task: True
  cmd: | 
    set -uev
    #module load {{ constants.tools.multiqc.module }}

    mkdir --parents qc
    multiqc --force --outdir qc .

    mkdir --parents igv_symbolic_links
    cd igv_symbolic_links

    {# Create symbolic links to deepvariant pass vcf, ichorCNA seg file, gatk igv seg file, merged vcf, and bams/crams #}
    {% for general_library_type, data_files in dataFiles | groupby('gltype') %}
      {% if general_library_type in 'exome' %}
        {% set taskPrefix = 'Exome' %}

        {% if tasks[taskPrefix+"_constitutional_snp_indel_caller_deepvariant"]|default(true) %}
          for line in `find ../{{ general_library_type }}/constitutional_variant_calls/deepvariant -name "*.deepvariant.pass.vcf.gz"`
          do
            ln --symbolic --force ${line}
            ln --symbolic --force ${line}.tbi
          done
        {% endif %}

        {% if tasks[taskPrefix+"_somatic_merge_vcfs_vcfMerger2"]|default(true) %}
          for line in `find ../{{ general_library_type }}/somatic_variant_calls/vcfmerger2 -name "*.merged.vcf.gz"`
          do
            ln --symbolic --force ${line}
            ln --symbolic --force ${line}.tbi
          done
        {% endif %}

        {% if tasks[taskPrefix+"_somatic_cna_caller_gatk"]|default(true) %}
          for line in `find ../{{ general_library_type }}/somatic_copy_number/gatk -name "*.re_centered.cr.igv.seg"`
          do
            ln --symbolic --force ${line}
          done
        {% endif %}
      {% elif general_library_type in 'genome' %}
        {% set taskPrefix = 'Genome' %}

        {% if tasks[taskPrefix+"_constitutional_snp_indel_caller_deepvariant"]|default(true) %}
          for line in `find ../{{ general_library_type }}/constitutional_variant_calls/deepvariant -name "*.deepvariant.pass.vcf.gz"`
          do
            ln --symbolic --force ${line}
            ln --symbolic --force ${line}.tbi
          done
        {% endif %}

        {% if tasks[taskPrefix+"_constitutional_cna_caller_ichor"]|default(true) %}
          for line in `find ../{{ general_library_type }}/copy_number_analysis/ichorCNA -name "*.ichorCNA.cna.seg"`
          do
            ln --symbolic --force ${line}
          done
        {% endif %}

        {% if tasks[taskPrefix+"_somatic_merge_vcfs_vcfMerger2"]|default(true) %}
          for line in `find ../{{ general_library_type }}/somatic_variant_calls/vcfmerger2 -name "*.merged.vcf.gz"`
          do
            ln --symbolic --force ${line}
            ln --symbolic --force ${line}.tbi
          done
        {% endif %}

        {% if tasks[taskPrefix+"_somatic_cna_caller_gatk"]|default(true) %}
          for line in `find ../{{ general_library_type }}/somatic_copy_number/gatk -name "*.re_centered.cr.igv.seg"`
          do
            ln --symbolic --force ${line}
          done
        {% endif %}
      {% elif general_library_type in 'rna' %}
        {% set taskPrefix = 'RNA' %}

      {% endif %}


    {% if cram|default(true) %}
      for line in `find ../{{ general_library_type }}/alignment -name "*.cram"`
      do
        ln --symbolic --force ${line}
        ln --symbolic --force ${line}.crai
      done
    {% else %}
      for line in `find ../{{ general_library_type }}/alignment -name "*.bam"`
      do
        ln --symbolic --force ${line}
        ln --symbolic --force ${line}.bai
      done
    {% endif %}

  {% endfor %}


{# Start of module calls #}
{# These if statements are kind of dead right now because they aren't passed by LIMS, but everything runs because of default(true) #}
{% if tasks.dna_alignment|default(true) %}
    {{- dna_alignment(samples) }}
{% endif %}

{% if tasks.constitutional_variant_calling|default(true) %}
    {{- constitutional_variant_calling(samples) }}
{% endif %}

{% if tasks.somatic_variant_calling|default(true) %}
    {{- somatic_variant_calling(samples) }}
{% endif %}

{%- if tasks.rna_quant|default(true) %}
    {{- rna_quant(samples) }}
{% endif -%}

{%- if tasks.rna_fusion_detection|default(true) %}
    {{- rna_fusion_detection(samples) }}
{% endif -%}

{%- if tasks.single_cell_rna|default(true) %}
    {{- single_cell_rna(dataFiles) }}
{% endif -%}
