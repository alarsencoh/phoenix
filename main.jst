# Phoenix Human GRCh38 pipeline
#
# The config variables includes an array of dataFiles. Here we
# need to group the data files into read groups, and then group 
# read_groups into samples. This will make it easier to add tasks
# later in the pipeline. The resulting samples dict will look
# like this:
# 
# sampleMergeKey/sampleName:
#   glPrep: RNA
#   glType: RNA
#       ... 
#   read_groups: 
#     C140KACXX_7_TAGCTT:
#       glPrep: RNA
#       glType: RNA
#           ...
#       data_files: 
#         - 
#           fastqPath: .../MMRF_1157_1_BM_CD138pos_T2_TSMRU_K03096_C140KACXX_TAGCTT_L007_R1_001.fastq.gz
#           fastqCode: R1
#           glPrep: RNA
#           glType: RNA
#               ...
#         - 
#           fastqPath: .../MMRF_1157_1_BM_CD138pos_T2_TSMRU_K03096_C140KACXX_TAGCTT_L007_R2_001.fastq.gz
#           fastqCode: R2
#           glPrep: RNA
#           glType: RNA
#               ...

{# Setting debug to True retains many of the intermediate files #}
{% if debug is not defined %}{% set debug = False %}{% endif %}
{# Tasks contains switches for toggling many of the features #}
{% if tasks is not defined %}{% set tasks = {} %}{% endif %}

{% from 'modules/dna_alignment/main.jst' import dna_alignment with context %}
{% from 'modules/constitutional/main.jst' import constitutional_variant_calling with context %}
{% from 'modules/somatic/main.jst' import somatic_variant_calling with context %}
{% from 'modules/rna/main.jst' import rna_quant with context %}
{% from 'modules/rna/main.jst' import rna_fusion_detection with context %}
{% from 'modules/single_cell/main.jst' import single_cell_rna with context %}
{% from 'modules/qc/main.jst' import qc with context %}

{% set samples = {} %}
{% for file in dataFiles %}
    {% set bn = file.fastqPath | basename %}
    {% if 'sampleMergeKey' in file %}
        {% set name = file.sampleMergeKey %}
    {% else %}
        {% set name = file.sampleName %}
    {% endif %}
    {% do file.update({'name': name}) %}
    {% do file.update({'basename': bn}) %}
    {% do file.update({'gltype': file.glType.lower()}) %}
    {% if 'subGroup' not in file %}{% do file.update({'subGroup': 'constitutional'}) %}{% endif %}

    {% if name not in samples %}
        {% do samples.update({name: {}}) %}
        {% do samples[name].update(file) %}
        {% do samples[name].update({"name": name}) %}
    {% endif %}
{% endfor %}

{% for rgid, data_files in dataFiles | groupby('rgid') %}
    {% set rg = data_files|first %}
    {% if 'sampleMergeKey' in rg %}
        {% set name = rg.sampleMergeKey %}
    {% else %}
        {% set name = rg.sampleName %}
    {% endif %}
    {% if not 'read_groups' in samples[name] %}
        {% do samples[name].update({'read_groups': {}}) %}
    {% endif %}
    {% do samples[name]['read_groups'].update({rgid: {}}) %}
    {% do samples[name]['read_groups'][rgid].update(rg) %}
    {% do samples[name]['read_groups'][rgid].update({'data_files': data_files}) %}
{% endfor %}

# Setup calculated props for samples
{% for sample in samples.values() if sample.gltype == 'exome' %}
    {% do sample.update({'library_code': sample.assayCode[0:2]|upper}) %}
    {% do sample.update({'capture_kit_code': sample.assayCode[2:5]|upper}) %}
    {% if sample.capture_kit_code in constants.phoenix.capture_kits %}
        {% do sample.update({'capture_kit': constants.phoenix.capture_kits[sample.capture_kit_code]}) %}
    {% else %}
        {% do sample.update({'capture_kit': constants.phoenix.capture_kits['default']}) %}
    {% endif %}
{% endfor %}
{% for sample in samples.values() if sample.gltype == 'rna' %}
    {% set readOrientation=sample.readOrientation|default('inward')|lower %}
    {% set rnaStrandType=sample.rnaStrandType|default('unstranded')|lower %}
    {% set rnaStrandDirection=sample.rnaStrandDirection|default('notapplicable')|lower %}
    {% set strandedness %}{{ readOrientation }}-{{ rnaStrandType }}-{{ rnaStrandDirection }}{% endset %}
    {% do sample.update({'strandedness': strandedness}) %}
{% endfor %}

{% if debug %}{{ log(samples|tojson(indent=4), level='CRITICAL') }}{% endif %}

{% for batch in dataFiles|batch(4) %}
- name: copy_fastqs_{{ loop.index }}
  output:
    {% for fq in batch %}
    - temp/fastqs/{{ fq.basename }}
    {% endfor %}
  tags: [rsync,]
  sbatch_args: ['-p', 'isilon']
  retry: 2
  cpus: 6
  walltime: "4:00:00"
  cmd: |
    set -uev

    mkdir -p temp/fastqs/

    {% for fq in batch %}
    rsync "{{ fq.fastqPath }}" "temp/fastqs/"
    {% endfor %}

{% endfor %}


- name: finalize
  after-re: .*
  cpus: 1
  walltime: "4:00:00"
  cmd: | 
    set -uev
    module load {{ constants.tools.multiqc_1_7.module }}
    
    mkdir --parents qc
    multiqc --force --outdir qc .
    sendqc qc/multiqc_data/multiqc_data.json {{ email }}


# Start of module calls
{% if tasks.dna_alignment|default(true) %}
    {{- dna_alignment(samples) }}
{% endif %}

{% if tasks.constitutional_variant_calling|default(true) %}
    {{- constitutional_variant_calling(samples) }}
{% endif %}

{% if tasks.somatic_variant_calling|default(true) %}
    {{- somatic_variant_calling(samples) }}
{% endif %}

{% if tasks.rna_quant|default(true) %}
    {{- rna_quant(samples) }}
{% endif %}

{% if tasks.rna_fusion_detection|default(true) %}
    {{- rna_fusion_detection(samples) }}
{% endif %}

{{- single_cell_rna(dataFiles) }}

{{- qc(samples) }}

