{% from 'modules/annotation/main.jst' import annotate_vcfs with context %}

{%- macro freebayes(sample, aligner='bwa', taskPrefix='Genome') %}

{%- set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{%- set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/freebayes/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/freebayes/{{ sample.name }}{% endset %}
{%- set all_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.freebayes.all.vcf.gz{% endset %}
{%- set pass_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.freebayes.pass.vcf.gz{% endset %}

{% for batch in constants.phoenix.calling_intervals %}

- name: freebayes_{{ sample.name }}_{{ aligner }}_{{ loop.index }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, freebayes, {{ sample.name }}]
  input: {{ bam }}
  walltime: "24:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.freebayes.module }}

    mkdir -p "{{ temp_dir }}"

    TAB=$'\t'
    cat <<EOF > "{{ temp_dir }}/{{ loop.index }}.bed"
    {% for interval in batch %}
    {{ interval.contig }}${TAB}{{ interval.start - 1 }}${TAB}{{ interval.stop }}
    {% endfor %}
    EOF

    freebayes \
      --bam "{{ bam }}" \
      --fasta-reference "{{ constants.phoenix.reference_fasta }}" \
      --targets "{{ temp_dir }}/{{ loop.index }}.bed" \
      --ploidy 2 \
      --min-repeat-entropy 1 \
      > "{{ temp_dir }}/{{ loop.index }}.vcf"

{% endfor %}


- name: freebayes_merge_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, freebayes, {{ sample.name }}]
  after-re: freebayes_{{ sample.name }}_{{ aligner }}_.*
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  walltime: "24:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bcftools.module }}

    mkdir -p "{{ results_dir }}"

    bcftools concat \
      --output-type z \
      --output "{{ all_vcf }}" \
      {% for batch in constants.phoenix.calling_intervals %}
      "{{ temp_dir }}/{{ loop.index }}.vcf" \
      {% endfor %}  

    bcftools index --tbi --force "{{ all_vcf }}"

    {% if not debug %}
    rm -r "{{ temp_dir }}"
    {% endif %}


- name: freebayes_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, freebayes, {{ sample.name }}]
  after: freebayes_merge_{{ sample.name }}_{{ aligner }}
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  walltime: "24:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bcftools.module }}

    {# Then filter out the passing variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'QUAL > 20' \
      {% if sample.gltype == 'exome' %}
      --targets-file "{{ sample.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"

{%- set after_task = 'freebayes_filter_variants_'+sample.name+'_'+aligner %}
{{- annotate_vcfs(sample, temp_dir, results_dir, after_task, pass_vcf, taskPrefix, aligner, 'freebayes', 'constitutional', 'snp_indel_caller') }}
{% endmacro %}