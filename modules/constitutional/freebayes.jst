{% from 'modules/annotation/snpeff.jst' import snpeff with context %}

{% macro freebayes(sample, aligner='bwa', taskPrefix='Genome') %}
{% set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/freebayes/{{ sample.name }}_{{ aligner }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/freebayes/{{ sample.name }}{% endset %}
{% set all_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.freebayes.all.vcf.gz{% endset %}
{% set pass_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.freebayes.pass.vcf.gz{% endset %}
{% set ann_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.freebayes.pass.ann.vcf.gz{% endset %}

{% for batch in constants.phoenix.calling_intervals %}
- name: freebayes_{{ sample.name }}_{{ aligner }}_{{ loop.index }}
  tags: [freebayes, {{ sample.gltype }}]
  input: {{ bam }}
  walltime: "24:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -uev
    module load {{ constants.tools.freebayes_1_2.module }}

    mkdir -p "{{ temp_dir }}"

    TAB=$'\t'
    cat <<EOF > "{{ temp_dir }}/{{ loop.index }}.bed"
    {% for interval in batch %}
    {{ interval.contig }}${TAB}{{ interval.start - 1 }}${TAB}{{ interval.stop }}
    {% endfor %}
    EOF

    freebayes \
      -b "{{ bam }}" \
      -f "{{ constants.phoenix.reference_fasta }}" \
      -t "{{ temp_dir }}/{{ loop.index }}.bed" \
      --ploidy 2 \
      --min-repeat-entropy 1 \
      > "{{ temp_dir }}/{{ loop.index }}.vcf"

{% endfor %}


- name: freebayes_merge_{{ sample.name }}_{{ aligner }}
  tags: [freebayes, bcftools, {{ sample.gltype }}]
  after-re: freebayes_{{ sample.name }}_{{ aligner }}_.*
  output: {{ all_vcf }}
  walltime: "24:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -euv
    module load {{ constants.tools.samtools_1_9.module }}

    mkdir -p "{{ results_dir }}"

    bcftools concat \
      -O z \
      -o "{{ all_vcf }}" \
      {% for batch in constants.phoenix.calling_intervals %}
      "{{ temp_dir }}/{{ loop.index }}.vcf" \
      {% endfor %}  

    bcftools index -tf "{{ all_vcf }}"

    {% if not debug %}
    rm -r "{{ temp_dir }}"
    {% endif %}


- name: freebayes_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [freebayes, bcftools, filter, {{ sample.gltype }}]
  after: freebayes_merge_{{ sample.name }}_{{ aligner }}
  output: {{ pass_vcf }}
  walltime: "24:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -euv
    module load {{ constants.tools.samtools_1_9.module }}

    # Then filter out the passing variants to a separate file
    bcftools filter \
      -O z \
      --include 'QUAL > 20' \
      {% if sample.gltype == 'exome' %}
      --targets-file "{{ sample.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index -tf "{{ pass_vcf }}"


{{ snpeff(pass_vcf, ann_vcf) }}

{% endmacro %}