{% from 'modules/annotation/main.jst' import annotate_vcfs with context %}
{% from 'utilities/vcf_stats.jst' import vcf_stats with context %}

{%- macro deepvariant(sample, aligner='bwa', taskPrefix='Genome') %}

{%- set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{%- set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/deepvariant/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/deepvariant/{{ sample.name }}{% endset %}
{%- set all_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.vcf.gz{% endset %}
{%- set pass_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.pass.vcf.gz{% endset %}

{%- set nshards=40 %}
{% for i in range(nshards) %}

{% set iteration = ('00000' + i|string)|reverse|truncate(5, True, '', 0)|reverse %}
{% set stop = ('00000' + nshards|string)|reverse|truncate(5, True, '', 0)|reverse %}

- name: deepvariant_make_examples_{{ sample.name }}_{{ aligner }}_shard{{ i }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  input: {{ bam }}
  output:
    - {{ temp_dir }}/{{ sample.name }}.ex.tfrecord-{{ iteration }}-of-{{ stop }}.gz
    - {{ temp_dir }}/{{ sample.name }}.gvcf.tfrecord-{{ iteration }}-of-{{ stop }}.gz
  cpus: 1
  mem: 4G
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.deepvariant.module }}

    PROJECT_ROOT=$PWD

    mkdir -p "{{ temp_dir }}"

    cd "{{ temp_dir }}"

    {#
    # Run make_examples
    # This function does not need to be run on a GPU
    # cd here in order to prevent wild temp files from polluting the project
    #}
    make_examples \
      --logging_level WARN \
      --mode calling \
      --task {{ i }} \
      --ref "{{ constants.phoenix.reference_fasta }}" \
      --reads "${PROJECT_ROOT}/{{ bam }}" \
      --examples "${PROJECT_ROOT}/{{ temp_dir }}/{{ sample.name }}.ex.tfrecord@{{ nshards }}.gz" \
      --gvcf "${PROJECT_ROOT}/{{ temp_dir }}/{{ sample.name }}.gvcf.tfrecord@{{ nshards }}.gz"
      
{% endfor %}

- name: deepvariant_call_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  reset: predecessors
  input:
    {% for i in range(nshards) %}
    {% set iteration = ('00000' + i|string)|reverse|truncate(5, True, '', 0)|reverse %}
    {% set stop = ('00000' + nshards|string)|reverse|truncate(5, True, '', 0)|reverse %}
    - {{ temp_dir }}/{{ sample.name }}.ex.tfrecord-{{ iteration }}-of-{{ stop }}.gz
    - {{ temp_dir }}/{{ sample.name }}.gvcf.tfrecord-{{ iteration }}-of-{{ stop }}.gz
    {% endfor %}
  output: {{ temp_dir }}/{{ sample.name }}.cvo.tfrecord.gz
  cpus: 8
  mem: 40G
  sbatch_args: ['-p', 'gpu', '--gres', 'gpu:1', '-N', '1', '--tasks-per-node', '1' ]
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.deepvariant.module }}

    PROJECT_ROOT=$PWD

    cd "{{ temp_dir }}"

    {# Run call_variants #}
    call_variants \
      {% if sample.gltype == 'exome' %}
      --checkpoint "{{ constants.phoenix.deepvariant_models.exome }}" \
      {% else %}
      --checkpoint  "{{ constants.phoenix.deepvariant_models.genome }}" \
      {% endif %}
      --examples "{{ sample.name }}.ex.tfrecord@{{ nshards }}.gz" \
      --outfile "{{ sample.name }}.cvo.tfrecord.gz"


- name: deepvariant_postprocess_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  reset: predecessors
  input: {{ temp_dir }}/{{ sample.name }}.cvo.tfrecord.gz
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.g.vcf.gz
  cpus: 1
  mem: 16G
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.deepvariant.module }}
    module load {{ constants.tools.bcftools.module }}

    PROJECT_ROOT=$PWD
    
    mkdir -p "{{ results_dir }}"

    cd "{{ temp_dir }}"
    
    {# Run postprocess_variants with gVCFs #}
    postprocess_variants \
        --ref "{{ constants.phoenix.reference_fasta }}" \
        --infile "{{ sample.name }}.cvo.tfrecord.gz" \
        --outfile "${PROJECT_ROOT}/{{ all_vcf }}" \
        --nonvariant_site_tfrecord_path "${PROJECT_ROOT}/{{ temp_dir }}/{{ sample.name }}.gvcf.tfrecord@{{ nshards }}.gz" \
        --gvcf_outfile "${PROJECT_ROOT}/{{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.g.vcf.gz"

    bcftools index --tbi --force "${PROJECT_ROOT}/{{ all_vcf }}"


- name: deepvariant_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  input:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 4G
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bcftools.module }}

    {# Then filter out the PASS variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      {% if sample.gltype == 'exome' %}
      --targets-file "{{ sample.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"

{{- annotate_vcfs(sample, temp_dir, results_dir, pass_vcf, taskPrefix, aligner, 'deepvariant', 'constitutional', 'snp_indel_caller') }}
{{- vcf_stats(pass_vcf, results_dir) }}
{{- vcf_stats(all_vcf, results_dir) }}

{% endmacro %}
