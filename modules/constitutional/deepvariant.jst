{% from 'modules/annotation/main.jst' import annotate_vcfs with context %}

{%- macro deepvariant(sample, aligner='bwa', taskPrefix='Genome') %}

{%- set bam %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{%- set temp_dir %}./temp/{{ sample.gltype }}/constitutional_variant_calls/deepvariant/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set results_dir %}./{{ sample.gltype }}/constitutional_variant_calls/deepvariant/{{ sample.name }}{% endset %}
{%- set all_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.vcf.gz{% endset %}
{%- set pass_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.pass.vcf.gz{% endset %}
{% set in_cloud = backend.startswith('cloud_') %}

{%- set nshards=40 %}
{% set zpad_nshards = (nshards|string).zfill(5) %}

{% for i in range(nshards) %}
{% set zpad_i = (i|string).zfill(5) %}

- name: deepvariant_make_examples_{{ sample.name }}_{{ aligner }}_shard{{ i }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  cloud_args:
    singularity_container: 'docker://registry.gitlab.com/coh_pipelines/tgen_phoenix_deepvariant_make_examples:20200229'
    transfer_container_to_remote: False
    reference_input:
      - {{ constants.phoenix.reference_fasta|cloudpath }}
      - {{ constants.phoenix.reference_fai|cloudpath }}
      - {{ constants.phoenix.reference_dict|cloudpath }}
  input:
    - {{ bam }}
    - {{ bam }}.bai
  output:
    - "{{ temp_dir }}/{{ sample.name }}.ex.tfrecord-{{ zpad_i }}-of-{{ zpad_nshards }}.gz"
    - "{{ temp_dir }}/{{ sample.name }}.gvcf.tfrecord-{{ zpad_i }}-of-{{ zpad_nshards }}.gz"
  cpus: 1
  mem: 4G
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail 

    #module load {{ constants.tools.deepvariant.module }}

    PROJECT_ROOT=$PWD

    mkdir -p "{{ temp_dir }}"

    cd "{{ temp_dir }}"

    {#
    # Run make_examples
    # This function does not need to be run on a GPU
    # cd here in order to prevent wild temp files from polluting the project
    #}
    make_examples \
      --logging_level WARN \
      --mode calling \
      --task {{ i }} \
      {% if in_cloud %}
      --ref "${PROJECT_ROOT}/{{ constants.phoenix.reference_fasta|cloudbasename(in_cloud) }}" \
      {% else %}
      --ref "{{ constants.phoenix.reference_fasta }}" \
      {% endif %}
      --reads "${PROJECT_ROOT}/{{ bam }}" \
      --examples "${PROJECT_ROOT}/{{ temp_dir }}/{{ sample.name }}.ex.tfrecord@{{ nshards }}.gz" \
      --gvcf "${PROJECT_ROOT}/{{ temp_dir }}/{{ sample.name }}.gvcf.tfrecord@{{ nshards }}.gz"
      
{% endfor %}

- name: deepvariant_call_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  cloud_args:
    singularity_container: 'docker://registry.gitlab.com/coh_pipelines/tgen_phoenix_deepvariant_make_examples:20200229'
    transfer_container_to_remote: False
    reference_input:
    {% if sample.gltype == 'exome' %}
      - {{ constants.phoenix.deepvariant_models.exome|cloudpath }}
    {% else %}
      - {{ constants.phoenix.deepvariant_models.genome_path }}/./model*
    {% endif %}
  input:
  {% for i in range(nshards) %}
    {% set zpad_i = (i|string).zfill(5) %}
    - "{{ temp_dir }}/{{ sample.name }}.ex.tfrecord-{{ zpad_i }}-of-{{ zpad_nshards }}.gz"
  {% endfor %}
  output: {{ temp_dir }}/{{ sample.name }}.cvo.tfrecord.gz
  cpus: 8
  mem: 40G
  sbatch_args: ['-p', 'gpu', '--gres', 'gpu:1', '-N', '1', '--tasks-per-node', '1' ]
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail
    echo "call variants"

    {# module load {{ constants.tools.deepvariant.module }} #}

    PROJECT_ROOT=$PWD

    cd "{{ temp_dir }}"

    {# Run call_variants #}
    call_variants \
      {% if sample.gltype == 'exome' %}
      --checkpoint "{%if in_cloud %}${PROJECT_ROOT}/{% endif %}{{ constants.phoenix.deepvariant_models.exome|cloudbasename(in_cloud) }}" \
      {% else %}
      --checkpoint "{%if in_cloud %}${PROJECT_ROOT}/{% endif %}{{ constants.phoenix.deepvariant_models.genome|cloudbasename(in_cloud) }}" \
      {% endif %}
      --examples "{{ sample.name }}.ex.tfrecord@{{ nshards }}.gz" \
      --outfile "{{ sample.name }}.cvo.tfrecord.gz"


- name: deepvariant_postprocess_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  cloud_args:
    singularity_container: '/home/dominic/containers/./phoenix_deepvariant_postprocess_variants.sif'
    transfer_container_to_remote: True
    reference_input:
      - {{ constants.phoenix.reference_fasta|cloudpath }}
      - {{ constants.phoenix.reference_fai|cloudpath }}
      - {{ constants.phoenix.reference_dict|cloudpath }}
  input:
  {% for i in range(nshards) %}
    {% set zpad_i = (i|string).zfill(5) %}
    - "{{ temp_dir }}/{{ sample.name }}.gvcf.tfrecord-{{ zpad_i }}-of-{{ zpad_nshards }}.gz"
  {% endfor %}
    - {{ temp_dir }}/{{ sample.name }}.cvo.tfrecord.gz
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    {# - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.g.vcf.gz
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.g.vcf.gz.tbi #}
  cpus: 8
  mem: 64G
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    {# module load {{ constants.tools.deepvariant.module }} #}
    {# module load {{ constants.tools.bcftools.module }} #}

    PROJECT_ROOT=$PWD
    
    mkdir -p "{{ results_dir }}" 

    cd "{{ temp_dir }}"
    
    {# Run postprocess_variants with gVCFs #}
    postprocess_variants \
        --ref "${PROJECT_ROOT}/{{ constants.phoenix.reference_fasta|cloudbasename(in_cloud) }}" \
        --infile "{{ sample.name }}.cvo.tfrecord.gz" \
        --outfile "${PROJECT_ROOT}/{{ all_vcf }}" \
        --nonvariant_site_tfrecord_path "${PROJECT_ROOT}/{{ temp_dir }}/{{ sample.name }}.gvcf.tfrecord@{{ nshards }}.gz" \
        --gvcf_outfile "${PROJECT_ROOT}/{{ results_dir }}/{{ sample.name }}.{{ aligner }}.deepvariant.all.g.vcf.gz"

    bcftools index --tbi --force "${PROJECT_ROOT}/{{ all_vcf }}"


- name: deepvariant_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, deepvariant, {{ sample.name }}]
  cloud_args:
    singularity_container: '/containers/jetstream_phoenix_full.sif'
    transfer_container_to_remote: False
  input:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 2
  mem: 4G
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    {# module load {{ constants.tools.bcftools.module }} #}

    {# Then filter out the PASS variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      {% if sample.gltype == 'exome' %}
      --targets-file "{{ sample.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"

{%- set after_task = 'deepvariant_filter_variants_'+sample.name+'_'+aligner %}
{# {{- annotate_vcfs(sample, temp_dir, results_dir, after_task, pass_vcf, taskPrefix, aligner, 'deepvariant', 'constitutional', 'snp_indel_caller') }} #}
{% endmacro %}
