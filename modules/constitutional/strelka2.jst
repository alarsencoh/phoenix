{% from 'modules/annotation/main.jst' import annotate_vcfs with context %}
{% from 'utilities/remove_files.jst' import remove_files with context %}

{%- macro strelka2_constitutional(sample, aligner='bwa', taskPrefix='Genome') %}

{%- set bam %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{%- set indel_candidates %}{{ sample.gltype }}/constitutional_structural_calls/manta/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz{% endset %}
{%- set temp_dir %}temp/{{ sample.gltype }}/constitutional_variant_calls/strelka2/{{ sample.name }}_{{ aligner }}{% endset %}
{%- set results_dir %}{{ sample.gltype }}/constitutional_variant_calls/strelka2/{{ sample.name }}{% endset %}
{%- set all_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.strelka2.all.vcf.gz{% endset %}
{%- set pass_vcf %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.strelka2.pass.vcf.gz{% endset %}

- name: strelka2_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, strelka2, {{ sample.name }}]
  methods: > 
    Constitutional variants for {{ sample.name }} ({{ aligner }}) were called with
    {{ constants.tools.strelka.verbose }}.
  input:
    - {{ bam }}
    - {{ indel_candidates }}
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    {% if cram|default(true) %}
    - {{ results_dir }}/evidence/{{ sample.name }}.{{ aligner }}.strelka2.realigned.cram
    - {{ results_dir }}/evidence/{{ sample.name }}.{{ aligner }}.strelka2.realigned.cram.crai
    {% else %}
    - {{ results_dir }}/evidence/{{ sample.name }}.{{ aligner }}.strelka2.realigned.bam
    - {{ results_dir }}/evidence/{{ sample.name }}.{{ aligner }}.strelka2.realigned.bam.bai
    {% endif %}
  cpus: 20
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.strelka.module }}
    module load {{ constants.tools.bcftools.module }}
    module load {{ constants.tools.python_2_7_15.module }}
    module load {{ constants.tools.samtools.module }}

    {# Purge any existing run files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"

    {#
    # In order to restrict calling to only the specified regions
    # strelka requires a bed file (that has been bgzipped and indexed
    # with tabix). Here we generate that file on the fly, store in
    # the run dir, and pass the path to Strelka.
    #}
    STRELKA_BED="{{ temp_dir }}/callRegions.bed"
    TAB=$'\t'
    cat <<EOF > "${STRELKA_BED}"
    {% for contig in constants.phoenix.calling_contigs %}
    {{ contig.contig }}${TAB}0${TAB}{{ contig.length }}
    {% endfor %}
    EOF

    bgzip -f "${STRELKA_BED}"
    tabix -f -p bed "${STRELKA_BED}.gz"

    {#
    # Some settings are only configurable via an ini file. Here 
    # we generate this ini file and save it to the run dir.
    #}
    STRELKA_CONFIG="{{ temp_dir }}/config.ini"
    cat <<EOF > "${STRELKA_CONFIG}"
    [StrelkaGermline]
    isWriteRealignedBam = 1
    EOF

    configureStrelkaGermlineWorkflow.py \
      {% if sample.gltype == 'exome' %}
      --exome \
      {% endif %}
      --config "${STRELKA_CONFIG}" \
      --callRegions "${STRELKA_BED}.gz" \
      --bam "{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam" \
      --indelCandidates "{{ indel_candidates }}" \
      --ref "{{ constants.phoenix.reference_fasta }}" \
      --runDir "{{ temp_dir }}"

    {# Execute on the local machine with 19 parallel jobs #}
    "{{ temp_dir }}/runWorkflow.py" -m local -j 19

    {# Move and rename the evidence bams or make cram #}
    mkdir -p "{{ results_dir }}/evidence"

    {% if cram|default(true) %}
    samtools view \
      -C \
      -@ 8 \
      --reference {{ constants.phoenix.reference_fasta }} \
      -o {{ results_dir }}/evidence/{{ sample.name }}.{{ aligner }}.strelka2.realigned.cram \
      {{ temp_dir }}/results/realigned/realigned.S1.bam

    samtools index {{ results_dir }}/evidence/{{ sample.name }}.{{ aligner }}.strelka2.realigned.cram
    {% else %}
    mv "{{ temp_dir }}/results/realigned/realigned.S1.bam" "{{ results_dir }}/evidence/{{ sample.name }}.{{ aligner }}.strelka2.realigned.bam"
    mv "{{ temp_dir }}/results/realigned/realigned.S1.bam.bai" "{{ results_dir }}/evidence/{{ sample.name }}.{{ aligner }}.strelka2.realigned.bam.bai"
    {% endif %}

    {# Move and rename the the vcfs out of their generic location #}
    mv "{{ temp_dir }}/results/variants/variants.vcf.gz" "{{ all_vcf }}"
    mv "{{ temp_dir }}/results/variants/variants.vcf.gz.tbi" "{{ all_vcf }}.tbi"


- name: strelka2_filter_variants_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype}}, constitutional, snp_indel_caller, strelka2, {{ sample.name }}]
  after: strelka2_{{ sample.name }}_{{ aligner }}
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bcftools.module }}

    {# Then filter out the PASS variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      {% if sample.gltype == 'exome' %}
      --targets-file "{{ sample.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"

    {# Remove the remaining files #}
    {% set task %}strelka2_filter_variants_{{ sample.name }}_{{ aligner }}{% endset %}
    {% set directory %}{{ temp_dir }}{% endset %}
    {{- remove_files(directory,none,task) }}

{%- set after_task = 'strelka2_filter_variants_'+sample.name+'_'+aligner %}
{{- annotate_vcfs(sample, temp_dir, results_dir, after_task, pass_vcf, taskPrefix, aligner, 'strelka2', 'constitutional', 'snp_indel_caller' ) }}
{% endmacro %}
