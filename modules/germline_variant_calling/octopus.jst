{% from 'modules/snpeff.jst' import snpeff with context %}

{% macro octopus(sample, aligner='bwa') %}
{% for batch in constants.phoenix.calling_intervals %}
- name: octopus_{{ sample.name }}_{{ aligner }}_{{ loop.index }}
  input: {{ sample.glType}}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam
  walltime: "24:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -uev
    module load {{ constants.tools.octopus_1_2.module }}

    mkdir -p "temp/{{ sample.name }}_{{ aligner }}_octopus/"

    octopus \
      --caller individual \
      --threads 4 \
      --ignore-unmapped-contigs \
      --assembly-candidate-generator ON \
      --somatics-only OFF \
      --phasing-level minimal \
      --legacy \
      --reference {{ constants.phoenix.reference_fasta }} \
      --reads ${LIST_BAMS[@]} \
      --normal-sample ${NORMAL_BAM_NAME} \
      --regions ${CHROM} \
      -o "temp/{{ sample.name }}_{{ aligner }}_octopus_vcf_chunks/{{ loop.index }}.vcf.gz" 

{% endfor %}


- name: octopus_merge_{{ sample.name }}_{{ aligner }}
  after: 
    re: octopus_{{ sample.name }}_{{ aligner }}_.*
  output: {{ sample.glType }}/constitutional_variant_calls/octopus/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.oct.vcf.gz
  walltime: "24:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -euv
    module load {{ constants.tools.gatk_4_1_0_0.module }}

    mkdir -p "{{ sample.glType }}/constitutional_variant_calls/octopus/{{ sample.name }}/"

    gatk MergeVcfs \
      --java-options "-Xmx14G" \
      {% for batch in constants.phoenix.calling_intervals %}
      --INPUT "temp/{{ sample.name }}_{{ aligner }}_octopus//{{ loop.index }}.vcf" \
      {% endfor %}
      --OUTPUT "{{ sample.glType }}/constitutional_variant_calls/octopus/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.oct.vcf.gz"

    {% if not debug %}
    rm -r "temp/{{ sample.name }}_{{ aligner }}_octopus/"
    {% endif %}


{{- snpeff(sample, aligner, "constitutional_variant_calls", "octopus", "oct") }}

{% endmacro %}
# Somatic calling with octopus
