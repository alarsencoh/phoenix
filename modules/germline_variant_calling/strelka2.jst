{% macro strelka2_constitutional(sample, aligner='bwa') %}
- name: manta_constitutional_{{ sample.name }}_{{ aligner }}
  tags: [manta, manta-constitutional, {{ sample.glType }}]
  methods: > 
    Constitutional structural variants and indels for {{ sample.name }} 
    ({{ aligner }}) were called with {{ constants.tools.manta_1_4.verbose }}.
  input:
    - {{ sample.glType }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam
  output: 
    - {{ sample.glType }}/constitutional_structural_calls/manta/{{ sample.name }}_{{ aligner }}/
  cpus: 40
  walltime: "24:00:00"
  cmd: |
    set -euv
    module load {{ constants.tools.manta_1_4.module }}
    module load {{ constants.tools.samtools_1_9.module }}

    RUNDIR="{{ sample.glType }}/constitutional_structural_calls/manta/{{ sample.name }}_{{ aligner }}/run_dir/"

    # Purge any existing run files prior to starting
    rm -r "${RUNDIR}" || true
    mkdir -p "${RUNDIR}"

    # In order to restrict calling to only the specified regions
    # Manta requires a bed file (that has been bgzipped and indexed
    # with tabix). Here we generate that file on the fly, store in
    # the run dir, and pass the path to Manta.
    MANTA_BED="${RUNDIR}/callRegions.bed"
    TAB=$'\t'
    cat <<EOF > "${MANTA_BED}"
    {% for batch in constants.phoenix.calling_intervals %}
    {% for interval in batch %}
    {{ interval.contig }}${TAB}{{ interval.start }}${TAB}{{ interval.stop }}
    {% endfor %}
    {% endfor %}
    EOF

    bgzip -f "${MANTA_BED}"
    tabix -f -p bed "${MANTA_BED}.gz"

    # Build the Manta run file
    configManta.py \
      {% if sample.glType == 'exome' %}
      --exome \
      --generateEvidenceBam \
      {% endif %}
      --callRegions "${MANTA_BED}" \
      --bam "{{ sample.glType }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam" \
      --referenceFasta "{{ constants.phoenix.reference_fasta_path }}" \
      --runDir "${RUNDIR}"

    # Execute on the local machine with 39 parallel jobs
    "${RUNDIR}/runWorkflow.py" -m local -j 39

    # Move the final results out of the rundir
    mv "${RUNDIR}/results/" "{{ sample.glType }}/constitutional_structural_calls/manta/{{ sample.name }}_{{ aligner }}/"

    # Compress the rest of the files for reference later
    tar -cz --remove-files \
      -f "{{ sample.glType }}/constitutional_structural_calls/manta/{{ sample.name }}_{{ aligner }}/run_dir.tar.gz" \
      "${RUNDIR}"


- name: strelka2_constitutional_{{ sample.name }}_{{ aligner }}
  tags: [strelka2, strelka2-germline, {{ sample.glType }}]
  methods: > 
    Germline variants for {{ sample.name }} ({{ aligner }}) were called with 
    {{ constants.tools.strelka_2_9_2.verbose }}.
  input:
    - {{ sample.glType }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam
    - {{ sample.glType }}/constitutional_structural_calls/manta/{{ sample.name }}_{{ aligner }}/
  output: 
    - {{ sample.glType }}/constitutional_variant_calls/strelka2/{{ sample.name }}_{{ aligner }}/
  cpus: 40
  walltime: "24:00:00"
  cmd: |
    set -euv
    module load {{ constants.tools.strelka_2_9_2.module }}
    module load {{ constants.tools.samtools_1_9.module }}

    RUNDIR="{{ sample.glType }}/somatic_variant_calls/strelka2/{{ sample.name }}_{{ aligner }}/run_dir/"

    # Purge any existing run files prior to starting
    rm -r "${RUNDIR}" || true
    mkdir -p "${RUNDIR}"

    # In order to restrict calling to only the specified regions
    # strelka requires a bed file (that has been bgzipped and indexed
    # with tabix). Here we generate that file on the fly, store in
    # the run dir, and pass the path to Strelka.
    STRELKA_BED="${RUNDIR}/callRegions.bed"
    TAB=$'\t'
    cat <<EOF > "${STRELKA_BED}"
    {% for batch in constants.phoenix.calling_intervals %}
    {% for interval in batch %}
    {{ interval.contig }}${TAB}{{ interval.start }}${TAB}{{ interval.stop }}
    {% endfor %}
    {% endfor %}
    EOF

    # Some settings are only configurable via an ini file. Here 
    # we generate this ini file and save it to the run dir.
    STRELKA_CONFIG="${RUNDIR}/config.ini"
    cat <<EOF > "${STRELKA_CONFIG}"
    [StrelkaGermline]
    isWriteRealignedBam = 1
    EOF

    configureStrelkaGermlineWorkflow.py \
      {% if sample.glType == 'exome' %}
      --exome \
      {% endif %}
      --config "${STRELKA_CONFIG}" \
      --callRegions "${STRELKA_BED}" \
      --bam "{{ sample.glType }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam" \
      --indelCandidates "{{ sample.glType }}/constitutional_structural_calls/manta/{{ sample.name }}_{{ aligner }}/variants/candidateSmallIndels.vcf.gz" \
      --ref "{{ constants.phoenix.reference_fasta_path }}" \
      --runDir "${RUNDIR}"

    # Execute on the local machine with 39 parallel jobs
    "${RUNDIR}/runWorkflow.py" -m local -j 39

    # Move the final results out of the rundir
    mv "${RUNDIR}/results/" "{{ sample.glType }}/somatic_variant_calls/strelka2/{{ sample.name }}_{{ aligner }}/"

    # Compress the workspace files after the run completes successfully
    tar \
      -cz \
      --remove-files \
      -f "{{ sample.glType }}/constitutional_structural_calls/strelka2/{{ sample.name }}_{{ aligner }}/run_dir.tar.gz" \
      "${RUNDIR}"

{% endmacro %}
