
{% macro assembly(tumor, aligner='bwa') %}

{% set tumor_bam %}{{ tumor.gltype }}/alignment/{{ aligner }}/{{ tumor.name }}/{{ tumor.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}{{ tumor.gltype }}/tumor_only_structural_calls/gammit/{{ tumor.name }}{% endset %}
{% set temp_dir %}temp/{{ tumor.gltype }}/tumor_only_structural_calls/gammit/{{ tumor.name }}{% endset %}

- name: discordant_loci_extraction_{{ tumor.name }}
  tags: [assembly,]
  input: {{ tumor_bam }}
  output:
    - {{ temp_dir }}/{{ tumor.name }}_list_of_fastqs.txt
    - {{ temp_dir }}/gene_regions.bed
    - {{ temp_dir }}/igs_regions.bed
  walltime: "12:00:00"
  cpus: 4
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail

    {# Purge any existing run files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"

    module load {{ constants.tools.python_3_7_2.module }}
    module load {{ constants.tools.dle.module }}

    TAB=$'\t'
    cat <<EOF > "{{ temp_dir }}/gene_regions.bed"
    chr4${TAB}1798273${TAB}1998273${TAB}NSD2
    chr6${TAB}41632262${TAB}42332262${TAB}CCND3
    chr8${TAB}124987758${TAB}129487754${TAB}MYC
    chr8${TAB}142918584${TAB}143925832${TAB}MAFA
    chr11${TAB}68732532${TAB}69685232${TAB}CCND1
    chr12${TAB}3690834${TAB}4690834${TAB}CCND2
    chr16${TAB}78096103${TAB}79950000${TAB}MAF
    chr20${TAB}39671358${TAB}40971360${TAB}MAFB
    EOF

    cat <<EOF > "{{ temp_dir }}/igs_regions.bed"
    chr2${TAB}88750483${TAB}90261139${TAB}IgK
    chr14${TAB}105533663${TAB}106881350${TAB}IgH
    chr22${TAB}21995603${TAB}23057822${TAB}IgL
    EOF

    dle.py \
      --alignment-file {{ tumor_bam }} \
      --reference-genome {{ constants.phoenix.reference_fasta }} \
      --regions-bed-file {{ temp_dir }}/gene_regions.bed \
      --igs-regions-bed-file {{ temp_dir }}/igs_regions.bed \
      --dir-out-fq {{ temp_dir }} \
      --prefix-fq {{ tumor.name }} \
      --min-mapq 0 \
      --threads 4 \
      --min-tuples 3 \
      --left-position-clustering-only True \
      --min-reads-per-cluster 3 \
      --clustering-distance 600

    {# Concatenating the list of fastqs to reduce downstream processing #}
    cat {{ temp_dir }}/*_list_fastq_files.txt > {{ temp_dir }}/{{ tumor.name }}_list_of_fastqs.txt

- name: trinity_assembly_{{ tumor.name }}
  tags: [assembly,]
  reset: predecessors
  input:
    - {{ temp_dir }}/{{ tumor.name }}_list_of_fastqs.txt
    - {{ temp_dir }}/gene_regions.bed
    - {{ temp_dir }}/igs_regions.bed
  output:
    - {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam
    - {{ results_dir }}/{{ tumor.name }}_ContigResults.txt
    - {{ results_dir }}/{{ tumor.name }}_FilteredContigResults.txt
    - {{ results_dir }}/{{ tumor.name }}_DEX_IgTx_GA_Summary.txt
  walltime: "24:00:00"
  cpus: 4
  mem: 10G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bwa.module }}
    module load {{ constants.tools.samtools.module }}
    {# star_fusion loads Trinity and it's dependencies in the background, ensuring compatibility #}
    module load {{ constants.tools.star_fusion.module }}
    trin_path=$(dirname `which Trinity`)

    rm -r {{ results_dir }} || true
    mkdir -p {{ results_dir }}

    {# Build a list of fastqs to iterate through #}
    fqr1arr=()
    fqr2arr=()
    for fq in `cut -f1 {{ temp_dir }}/{{ tumor.name }}_list_of_fastqs.txt`
    do
      fqr1arr+=("${fq}")
    done
    for fq in `cut -f2 {{ temp_dir }}/{{ tumor.name }}_list_of_fastqs.txt`
    do
      fqr2arr+=("${fq}")
    done

    {# Submit a trinity job for each pair of fastqs #}
    assemErrors=0
    assemBams=()
    for i in ${!fqr1arr[@]}
    do
      leftfq=${fqr1arr[i]}
      rightfq=${fqr2arr[i]}
      chrRegion=$(echo ${leftfq#{{ temp_dir }}/{{ tumor.name }}_} | cut -d'_' -f1-3)
      cluster=$(echo ${leftfq#{{ temp_dir }}/{{ tumor.name }}_} | cut -d'_' -f4-6)
      Trinity \
        --seqType fq \
        --left $leftfq \
        --right $rightfq \
        --run_as_paired \
        --output {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity \
        --trimmomatic \
        --no_normalize_reads \
        --CPU 4 \
        --max_memory 10G || error=true
      if [[ -v error ]]
      then
        assemErrors=$(expr $assemErrors + 1)
        unset error
      else
        ${trin_path}/util/TrinityStats.pl {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta

        sed -i "s/^>/>{{ tumor.name }}_${chrRegion}_${cluster}:/g" {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta

        bwa mem \
          -t 4 \
          -o {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/trinbwafile.sam \
          {{ constants.phoenix.bwa_index }} \
          {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta

        samtools view \
          -@ 4 \
          -b {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/trinbwafile.sam |\
        samtools sort \
          -o {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/{{ tumor.name }}_${chrRegion}_${cluster}_sorted.bam

        samtools index -@ 4 {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/{{ tumor.name }}_${chrRegion}_${cluster}_sorted.bam

        bwa index {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta
        bwa mem \
          -t 4 \
          -o {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/ReadstoContigs.sam \
          {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta \
          ${leftfq} ${rightfq}

        mkdir -p {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}
        samtools view -b {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/ReadstoContigs.sam |\
        samtools sort -o {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/{{ tumor.name }}_${chrRegion}_${cluster}_ReadstoContigs.bam
        samtools index {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/{{ tumor.name }}_${chrRegion}_${cluster}_ReadstoContigs.bam

        assemBam+=("{{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/{{ tumor.name }}_${chrRegion}_${cluster}_sorted.bam")
      fi
      i=$(expr $i + 1)
    done

    echo "$assemErrors out of {{ '${#fqr1arr[@]}' }} fastq pairs failed to assemble"

    if [ "$assemErrors" -ne {{ '"${#fqr1arr[@]}"' }} ]
    then
      echo "Merging assembled bams"
      samtools merge \
        -@ 4 \
        {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam \
        ${assemBam[*]}

      samtools index -@ 4 {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam

      cat {{ temp_dir }}/gene_regions.bed {{ temp_dir }}/igs_regions.bed | cut -f1-3 > "{{ temp_dir }}/pairoscopeRegions.bed"

      python3 ${JS_PIPELINE_PATH}/required_scripts/{{ constants.phoenix.process_assembled_bam }} \
        --input_bam {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam \
        --fastq_dir {{ temp_dir }} \
        --contig 125 \
        --reads 3 \
        --window 25 \
        --pairoscope_bed_file {{ temp_dir }}/pairoscopeRegions.bed \
        --output_path {{ results_dir }} \
        --specimen {{ tumor.name }} \
        --bam_path {{ results_dir }}

      mv {{ results_dir }}/DEX_IgTx_GA_Summary.txt {{ results_dir }}/{{ tumor.name }}_DEX_IgTx_GA_Summary.txt
      if [ -f {{ results_dir }}/ContigResults.txt ]
      then
        mv {{ results_dir }}/ContigResults.txt {{ results_dir }}/{{ tumor.name }}_ContigResults.txt
      fi
      if [ -f {{ results_dir }}/FilteredContigResults.txt ]
      then
        mv {{ results_dir }}/FilteredContigResults.txt {{ results_dir }}/{{ tumor.name }}_FilteredContigResults.txt
      fi
      {# Touching output files to unsure their existence, even if empty #}
      touch {{ results_dir }}/{{ tumor.name }}_ContigResults.txt
      touch {{ results_dir }}/{{ tumor.name }}_FilteredContigResults.txt
      rm {{ results_dir }}/r1counts.txt || true
    fi

{% endmacro %}