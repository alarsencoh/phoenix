{% from 'modules/read_group_line.jst' import read_group_line %}

# Run STAR RNA Alignment for quantification
{% macro star_quant(sample) %}
{% set r1fqlist = [] %}
{% set r2fqlist = [] %}
{% set rglinelist = [] %}

{% for rgid, rg in sample.read_groups.items() %}
  {% if rg.data_files|length != 2 %}
      {{ raise('This module only supports paired-end data with two fastqs per rg') }}
  {% endif %}
  {% do rglinelist.append( read_group_line(rg, format='star') ) %}
  
  {% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
  {% do r1fastq.update({"path": "temp/fastqs/" + (r1fastq.fastqPath|basename)}) %}
  {% do r1fqlist.append(r1fastq) %}
    
  {% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
  {% do r2fastq.update({"path": "temp/fastqs/" + (r2fastq.fastqPath|basename)}) %}
  {% do r2fqlist.append(r2fastq) %}

{% endfor %}

{% set read_length = sample.star_index|default('default') %}
{% set star_index = constants.phoenix.star_indices[read_length] %}

- name: star_quant_{{ sample.name }}
  methods: >
    Transcript quantification for {{ sample.name }} was performed with
    {{ constants.tools.star_2_6_1d.verbose }} followed by TODO...
  input:
    {% for fq in r1fqlist %}
    - {{ fq.path }}
    {% endfor %}
    {% for fq in r2fqlist %}
    - {{ fq.path }}
    {% endfor %}
  output: {{ sample.glType }}/star-quant/{{ sample.name }}/
  cpus: 16
  walltime: "24:00:00"
  cmd: |
    set -uev
    module load {{ constants.tools.star_2_6_1d.module }}

    mkdir -p "{{ sample.glType }}/star-quant/{{ sample.name }}/"

    STAR \
      --alignIntronMin 20 \
      --alignIntronMax 1000000 \
      --alignMatesGapMax 1000000 \
      --alignSJoverhangMin 8 \
      --alignSJDBoverhangMin 1 \
      --chimSegmentMin 15 \
      --chimJunctionOverhangMin 15 \
      --genomeLoad NoSharedMemory \
      --limitOutSAMoneReadBytes 90000000 \
      --outFilterType BySJout \
      --outFilterMultimapNmax 10 \
      --outFilterMismatchNmax 10 \
      --outFilterMismatchNoverLmax 0.1 \
      --outSAMstrandField intronMotif \
      --outSAMunmapped Within \
      --outSAMmapqUnique 255 \
      --outSAMmode Full \
      --outSAMtype SAM \
      --readFilesCommand zcat \
      --runMode alignReads \
      --runThreadN 14 \
      --seedSearchStartLmax 30 \
      --genomeDir "{{ star_index }}" \
      --readFilesIn "{{ r1fqlist|map(attribute='path')|join(',') }}" "{{ r2fqlist|map(attribute='path')|join(',') }}" \
      --outSAMattrRGline "{{ rglinelist|join(',') }}" \
      --outFileNamePrefix "{{ sample.glType }}/star-quant/{{ sample.name }}/{{ sample.name }}_"


- name: htseq_{{ sample.name }}
  input: {{ sample.glType }}/star-quant/{{ sample.name }}/
  output: {{ sample.glType }}/htseq/{{ sample.name }}/
  cpus: 16
  walltime: "24:00:00"
  cmd: |
    set -uev
    module load {{ constants.tools.htseq_0_6_1.module }}
    
    htseq TODO

{% endmacro %}
