# These macros are run on bams from the dna_alignment and the star_quant modules.
# A cram is made for each bam followed by running BAM qc steps with samtools and gatk.
# Currently supports any sample.

{% from 'modules/qc/stats2json.jst' import stats2json with context %}

{# Set often used reference bundles #}
{% set bwa_fasta_input_bundle %}
    - {{ constants.phoenix.reference_fasta|cloudpath }}
    - {{ constants.phoenix.reference_fai|cloudpath }}
    - {{ constants.phoenix.reference_dict|cloudpath }}
{% endset %}
{% set star_fasta_input_bundle %}
    - {{ constants.phoenix.star_fasta|cloudpath }}
    - {{ constants.phoenix.star_fasta|cloudpath }}.fai
    - {{ constants.phoenix.star_fasta[:-3]|cloudpath }}.dict
{% endset %}
{% set in_cloud = backend.startswith('cloud_') %}

{% macro bam_qc_samtools_stats(sample, aligner='bwa') %}
{% set bam %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: samtools_stats_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_stats, {{ sample.name }}]
  methods: Quality control metrics for {{ sample.name }} ({{ aligner }}) were
    generated with {{ constants.tools.samtools.verbose }} stats.
  cloud_args:
    singularity_container: '/containers/jetstream_phoenix_full.sif'
    transfer_container_to_remote: False
    reference_input:
    {% if aligner == 'star' %}
        {{- star_fasta_input_bundle }}
    {% elif aligner == 'bwa' %}
        {{- bwa_fasta_input_bundle }}
    {% endif %}
    - {{ constants.phoenix.reference_non_N_bed|cloudpath }}
  input: {{ bam }}
  output: {{ results_dir }}/{{ bam|basename }}.bamstats.txt
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail

    #module load {{ constants.tools.samtools.module }}
    #module load {{ constants.tools.bedtools.module }}

    mkdir -p "{{ results_dir }}"

    {# If the sample.gltype == 'exome' then intersect the capture space with the Non-N genomic space #}
    {% if sample.gltype == 'exome' %}
    bedtools intersect \
      -a {{ constants.phoenix.reference_non_N_bed|cloudbasename(in_cloud) }} \
      -b {{ sample.capture_kit.no_header_targets_interval_list }} \
      | \
    sort -k1,1 -k2,2n \
      > {{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam.samstats_no_N_1based_target_regions.txt
    {% endif %}

    {#
      samtools view
        -q INT   only include reads with mapping quality >= INT [0]
        -h       include header in SAM output

      samtools stats
       --filtering-flag 256
            not primary alignment (0x100)
       --coverage <int>,<int>,<int>    Coverage distribution min,max,step [1,1000,1]
    #}
    samtools view \
      --threads 4 \
      -q 20 \
      -h \
      "{{ bam }}" \
      | \
    samtools stats \
      --remove-dups \
      --remove-overlaps \
      --filtering-flag 256 \
      --coverage 1,2500,1 \
      {% if aligner == 'star' %}
      --reference {{ constants.phoenix.star_fasta|cloudbasename(in_cloud) }} \
      --target-regions {{ constants.phoenix.reference_non_N_bed|cloudbasename(in_cloud) }} \
      {% elif aligner == 'bwa' %}
      {% if sample.gltype == 'exome' %}
      --target-regions {{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam.samstats_no_N_1based_target_regions.txt \
      {% else %}
      --target-regions {{ constants.phoenix.reference_non_N_bed|cloudbasename(in_cloud) }} \
      {% endif %}
      --reference {{ constants.phoenix.reference_fasta|cloudbasename(in_cloud) }} \
      {% endif %}
      > "{{ results_dir }}/{{ bam|basename }}.bamstats.txt"

{% for lb, rgs in sample.read_groups.values()|groupby('rglb') %}
- name: samtools_stats_{{ sample.name }}_{{ aligner }}_{{ lb }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_stats, {{ sample.name }}]
  methods: Quality control metrics for {{ sample.name }} ({{ aligner }}) were
    generated with {{ constants.tools.samtools.verbose }} stats.
  cloud_args:
    singularity_container: '/containers/jetstream_phoenix_full.sif'
    transfer_container_to_remote: False
    reference_input:
    {% if aligner == 'star' %}
        {{- star_fasta_input_bundle }}
    {% elif aligner == 'bwa' %}
        {{- bwa_fasta_input_bundle }}
    {% endif %}
    - {{ constants.phoenix.reference_non_N_bed|cloudpath }}
  input: {{ bam }}
  output: {{ results_dir }}/{{ bam|basename }}.{{ lb }}.bamstats.txt
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail

    #module load {{ constants.tools.samtools.module }}
    #module load {{ constants.tools.bedtools.module }}

    mkdir -p "{{ results_dir }}"

    {# If the sample.gltype == 'exome' then intersect the capture space with the Non-N genomic space #}
    {% if sample.gltype == 'exome' %}
    bedtools intersect \
      -a {{ constants.phoenix.reference_non_N_bed|cloudbasename(in_cloud) }} \
      -b {{ sample.capture_kit.no_header_targets_interval_list }} \
      | \
    sort -k1,1 -k2,2n \
      > {{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam.{{ lb }}.samstats_no_N_1based_target_regions.txt
    {% endif %}

    {#
      samtools view
        -q INT   only include reads with mapping quality >= INT [0]
        -h       include header in SAM output

      samtools stats
       --filtering-flag 256
            not primary alignment (0x100)
       --coverage <int>,<int>,<int>    Coverage distribution min,max,step [1,1000,1]
     #}
    samtools view \
      --threads 4 \
      -q 20 \
      -h \
      {% for rg in rgs %}
      -r "{{ rg.rgid }}" \
      {% endfor %}
      "{{ bam }}" \
      | \
    samtools stats \
      --remove-dups \
      --remove-overlaps \
      --filtering-flag 256 \
      --coverage 1,2500,1 \
      {% if aligner == 'star' %}
      --reference {{ constants.phoenix.star_fasta|cloudbasename(in_cloud) }} \
      --target-regions {{ constants.phoenix.reference_non_N_bed|cloudbasename(in_cloud) }} \
      {% elif aligner == 'bwa' %}
      {% if sample.gltype == 'exome' %}
      --target-regions {{ results_dir }}/{{ sample.name }}.{{ aligner }}.bam.{{ lb }}.samstats_no_N_1based_target_regions.txt \
      {% else %}
      --target-regions {{ constants.phoenix.reference_non_N_bed|cloudbasename(in_cloud) }} \
      {% endif %}
      --reference {{ constants.phoenix.reference_fasta|cloudbasename(in_cloud) }} \
      {% endif %}
      > "{{ results_dir }}/{{ bam|basename }}.{{ lb }}.bamstats.txt"
{% endfor %}

{% endmacro %}


{% macro bam_qc_samtools_flagstat(sample, aligner='bwa') %}
{% set bam %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: samtools_flagstat_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_flagstat, {{ sample.name }}]
  methods: Quality control metrics for {{ sample.name }} ({{ aligner }}) were
    generated with {{ constants.tools.samtools.verbose }} flagstat.
  cloud_args:
    singularity_container: '/containers/jetstream_phoenix_full.sif'
    transfer_container_to_remote: False
    reference_input:
    {% if aligner == 'star' %}
        {{- star_fasta_input_bundle }}
    {% elif aligner == 'bwa' %}
        {{- bwa_fasta_input_bundle }}
    {% endif %}
  input: {{ bam }}
  output: {{ results_dir }}/{{ bam|basename }}.flagstats.txt
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail
    #module load {{ constants.tools.samtools.module }}

    mkdir -p "{{ results_dir }}"

    samtools flagstat \
      --threads 4 \
      "{{ bam }}" \
      > "{{ results_dir }}/{{ bam|basename }}.flagstats.txt"

{% endmacro %}


{% macro bam_qc_samtools_idxstats(sample, aligner='bwa') %}
{% set bam %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: samtools_idxstats_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_idxstats, {{ sample.name }}]
  methods: Index stats for {{ sample.name }} ({{ aligner }}) were
    generated with {{ constants.tools.samtools.verbose }} idxstats.
  cloud_args:
    singularity_container: '/containers/jetstream_phoenix_full.sif'
    transfer_container_to_remote: False
    reference_input:
    {% if aligner == 'star' %}
        {{- star_fasta_input_bundle }}
    {% elif aligner == 'bwa' %}
        {{- bwa_fasta_input_bundle }}
    {% endif %}
  input: {{ bam }}
  output: {{ results_dir }}/{{ bam|basename }}.idxstats.txt
  walltime: "4:00:00"
  cpus: 1
  mem: 2G
  cmd: |
    set -eu
    set -o pipefail
    #module load {{ constants.tools.samtools.module }}

    mkdir -p "{{ results_dir }}"

    samtools idxstats \
      "{{ bam }}" >\
      "{{ results_dir }}/{{ bam|basename }}.idxstats.txt"

{% endmacro %}


{% macro bam_qc_gatk_collectmultiplemetrics(sample, aligner='bwa') %}
{% set bam %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}
{% set alignment_summary_metrics %}{{ results_dir }}/{{ bam|basename }}.alignment_summary_metrics{% endset %}
{% set insert_size_metrics %}{{ results_dir }}/{{ bam|basename }}.insert_size_metrics{% endset %}

- name: gatk_collectmultiplemetrics_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, gatk_CollectMultipleMetrics, {{ sample.name }}]
  methods: Alignment metrics, base distribution, insert size, quality,
    and other metrics for {{ sample.name }} ({{ aligner }}) were
    gathered with {{ constants.tools.gatk.verbose }}
    CollectMultipleMetrics.
  cloud_args:
    singularity_container: '/containers/gatk_4.1.6.0.sif'
    transfer_container_to_remote: False
    reference_input:
    {% if aligner == 'star' %}
        {{- star_fasta_input_bundle }}
    {% elif aligner == 'bwa' %}
        {{- bwa_fasta_input_bundle }}
    {% endif %}
  input: {{ bam }}
  output:
    - {{ results_dir }}/{{ bam|basename }}.alignment_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.bait_bias_detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.bait_bias_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.base_distribution_by_cycle_metrics
    - {{ results_dir }}/{{ bam|basename }}.base_distribution_by_cycle.pdf
    - {{ results_dir }}/{{ bam|basename }}.error_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.pdf
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.insert_size_metrics
    - {{ results_dir }}/{{ bam|basename }}.insert_size_histogram.pdf
    - {{ results_dir }}/{{ bam|basename }}.pre_adapter_detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.pre_adapter_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_by_cycle_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_by_cycle.pdf
    - {{ results_dir }}/{{ bam|basename }}.quality_distribution_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_distribution.pdf
    - {{ results_dir }}/{{ bam|basename }}.quality_yield_metrics
  walltime: "24:00:00"
  cpus: 2
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail

    #module load {{ constants.tools.gatk.module }}
    #module load {{ constants.tools.R.module }}

    mkdir -p "{{ results_dir }}"

    gatk CollectMultipleMetrics \
      --java-options "-Xmx7G" \
      --INPUT "{{ bam }}" \
      --OUTPUT "{{ results_dir }}/{{ bam|basename }}" \
      {% if aligner == 'star' %}
      --REFERENCE_SEQUENCE {{ constants.phoenix.star_fasta|cloudbasename(in_cloud) }} \
      {% elif aligner == 'bwa' %}
      --REFERENCE_SEQUENCE {{ constants.phoenix.reference_fasta|cloudbasename(in_cloud) }} \
      {% endif %}
      --METRIC_ACCUMULATION_LEVEL null \
      --METRIC_ACCUMULATION_LEVEL LIBRARY \
      --METRIC_ACCUMULATION_LEVEL SAMPLE \
      --PROGRAM null \
      --PROGRAM CollectAlignmentSummaryMetrics \
      --PROGRAM CollectBaseDistributionByCycle \
      --PROGRAM CollectInsertSizeMetrics \
      --PROGRAM MeanQualityByCycle \
      --PROGRAM QualityScoreDistribution \
      --PROGRAM CollectGcBiasMetrics \
      --PROGRAM CollectSequencingArtifactMetrics \
      --PROGRAM CollectQualityYieldMetrics

{{ stats2json(sample, alignment_summary_metrics, "picard_alignment_summary_metrics", aligner=aligner) }}
{{ stats2json(sample, insert_size_metrics, "picard_insert_size_metrics", aligner=aligner) }}
{% endmacro %}


{% macro bam_qc_gatk_convertsequencingarrtifacttooxog(sample, aligner='bwa') %}
{% set bam %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: gatk_convertsequencingarrtifacttooxog_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, gatk_ConvertSequencingArtifactToOxoG, {{ sample.name }}]
  cloud_args:
    singularity_container: '/containers/gatk_4.1.6.0.sif'
    transfer_container_to_remote: False
    reference_input:
    {% if aligner == 'star' %}
        {{- star_fasta_input_bundle }}
    {% elif aligner == 'bwa' %}
        {{- bwa_fasta_input_bundle }}
    {% endif %}
  input:
    - {{ bam }}
    - {{ results_dir }}/{{ bam|basename }}.alignment_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.bait_bias_detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.bait_bias_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.base_distribution_by_cycle_metrics
    - {{ results_dir }}/{{ bam|basename }}.base_distribution_by_cycle.pdf
    - {{ results_dir }}/{{ bam|basename }}.error_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.pdf
    - {{ results_dir }}/{{ bam|basename }}.gc_bias.summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.insert_size_metrics
    - {{ results_dir }}/{{ bam|basename }}.insert_size_histogram.pdf
    - {{ results_dir }}/{{ bam|basename }}.pre_adapter_detail_metrics
    - {{ results_dir }}/{{ bam|basename }}.pre_adapter_summary_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_by_cycle_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_by_cycle.pdf
    - {{ results_dir }}/{{ bam|basename }}.quality_distribution_metrics
    - {{ results_dir }}/{{ bam|basename }}.quality_distribution.pdf
    - {{ results_dir }}/{{ bam|basename }}.quality_yield_metrics
  {# after: gatk_collectmultiplemetrics_{{ sample.name }}_{{ aligner }} #}
  output: {{ results_dir }}/{{ bam|basename }}.oxog_metrics
  walltime: "24:00:00"
  cpus: 8
  mem: 32G
  cmd: |
    set -eu
    set -o pipefail
    #module load {{ constants.tools.gatk.module }}

    gatk ConvertSequencingArtifactToOxoG \
      {% if aligner == 'star' %}
      --REFERENCE_SEQUENCE {{ constants.phoenix.star_fasta|cloudbasename(in_cloud) }} \
      {% elif aligner == 'bwa' %}
      --REFERENCE_SEQUENCE {{ constants.phoenix.reference_fasta|cloudbasename(in_cloud) }} \
      {% endif %}
      --INPUT_BASE "{{ results_dir }}/{{ bam|basename }}"

{% endmacro %}


{% macro bam_qc_snpsniffer_geno(sample, aligner='bwa') %}
{% set bam %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}./{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: snpsniffer_geno_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, genotype_concordance, snpSniffer, {{ sample.name }}]
  cloud_args:
    singularity_container: '/containers/jetstream_phoenix_full.sif'
    transfer_container_to_remote: False
    reference_input:
    {% if aligner == 'star' %}
        {{- star_fasta_input_bundle }}
    {% elif aligner == 'bwa' %}
        {{- bwa_fasta_input_bundle }}
    {% endif %}
    - {{ constants.phoenix.snpSniffer_sites|cloudpath }}
    - {{ constants.phoenix.bcftools_annotate_contig_update_ucsc2ensembl|cloudpath }}
  input:
    - {{ bam }}
    - {{ bam }}.bai
  output: 
    - {{ results_dir }}/{{ bam|basename }}.snpSniffer.vcf
  cpus: 4
  cmd: |
    set -eu
    set -o pipefail
    #module load {{ constants.tools.bcftools.module }}
    
    mkdir -p {{ results_dir }}

    {# Genotype the 387 test positions across the genome, filter to calls with DP >= 5, sort, remove chr from contig names #}
    bcftools mpileup \
      --no-BAQ \
      --max-depth 5000 \
      --min-MQ 0 \
      --min-BQ 13 \
      {% if aligner == 'star' %}
      --fasta-ref {{ constants.phoenix.star_fasta|cloudbasename(in_cloud) }} \
      {% elif aligner == 'bwa' %}
      --fasta-ref {{ constants.phoenix.reference_fasta|cloudbasename(in_cloud) }} \
      {% endif %}
      --regions-file {{ constants.phoenix.snpSniffer_sites|cloudbasename(in_cloud) }} \
      {{ bam }} \
      | \
    bcftools call \
      --consensus-caller \
      --skip-variants indels \
      | \
    bcftools sort \
      | \
    bcftools annotate \
      --threads 2 \
      --include 'INFO/DP >= 5' \
      --rename-chrs {{ constants.phoenix.bcftools_annotate_contig_update_ucsc2ensembl|cloudbasename(in_cloud) }} \
      --output-type v \
      --output "{{ results_dir }}/{{ bam|basename }}.snpSniffer.vcf"

{% endmacro %}
