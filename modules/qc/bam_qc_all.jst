# These macros are run on bams from the dna_alignment and the star_quant modules.
# A cram is made for each bam followed by running BAM qc steps with samtools and gatk.
# Currently supports any sample.

{% macro bam_qc_samtools_stats(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set stats_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: samtools_stats_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_stats, {{ sample.name }}]
  methods: Quality control metrics for {{ sample.name }} ({{ aligner }}) were
    generated with {{ constants.tools.samtools_1_9.verbose }} stats.
  input: {{ sample.gltype}}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam
  output: {{ stats_dir }}/{{ bam_path|basename }}.bamstats.txt
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.samtools_1_9.module }}

    mkdir -p "{{ stats_dir }}"

    samtools view \
      --threads 4 \
      -h \
      "{{ bam_path }}" \
      | \
    samtools stats \
      --remove-dups \
      --remove-overlaps \
      {% if aligner == 'star' %}
      --reference "{{ constants.phoenix.star_fasta }}" \
      {% elif aligner == 'bwa' %}
      --reference "{{ constants.phoenix.reference_fasta }}" \
      {% endif %}
      > "{{ stats_dir }}/{{ bam_path|basename }}.bamstats.txt"

{% for lb, rgs in sample.read_groups.values()|groupby('rglb') %}
- name: samtools_stats_{{ sample.name }}_{{ aligner }}_{{ lb }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_stats, {{ sample.name }}]
  methods: Quality control metrics for {{ sample.name }} ({{ aligner }}) were
    generated with {{ constants.tools.samtools_1_9.verbose }} stats.
  input: {{ sample.gltype}}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.samtools_1_9.module }}

    mkdir -p "{{ stats_dir }}"

    samtools view \
      --threads 4 \
      -h \
      {% for rg in rgs %}
      -r "{{ rg.rgid }}" \
      {% endfor %}
      "{{ bam_path }}" \
      | \
    samtools stats \
      --remove-dups \
      --remove-overlaps \
      {% if aligner == 'star' %}
      --reference "{{ constants.phoenix.star_fasta }}" \
      {% elif aligner == 'bwa' %}
      --reference "{{ constants.phoenix.reference_fasta }}" \
      {% endif %}
      > "{{ stats_dir }}/{{ bam_path|basename }}.{{ lb }}.bamstats.txt"
{% endfor %}

{% endmacro %}


{% macro bam_qc_samtools_flagstat(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set stats_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: samtools_flagstat_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_flagstat, {{ sample.name }}]
  methods: Quality control metrics for {{ sample.name }} ({{ aligner }}) were
    generated with {{ constants.tools.samtools_1_9.verbose }} flagstat.
  input: {{ sample.gltype}}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam
  walltime: "4:00:00"
  cpus: 4
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.samtools_1_9.module }}

    mkdir -p "{{ stats_dir }}"

    samtools flagstat \
      --threads 4 \
      "{{ bam_path }}" \
      > "{{ stats_dir }}/{{ bam_path|basename }}.flagstats.txt"

{% endmacro %}


{% macro bam_qc_samtools_idxstats(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set stats_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: samtools_idxstats_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, samtools_idxstats, {{ sample.name }}]
  methods: Index stats for {{ sample.name }} ({{ aligner }}) were
    generated with {{ constants.tools.samtools_1_9.verbose }} idxstats.
  input: {{ bam_path }}
  walltime: "4:00:00"
  cpus: 1
  mem: 2G
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.samtools_1_9.module }}

    mkdir -p "{{ stats_dir }}"

    samtools idxstats \
      "{{ bam_path }}" >\
      "{{ stats_dir }}/{{ bam_path|basename }}.idxstats.txt"

{% endmacro %}


{% macro bam_qc_gatk_collectmultiplemetrics(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set stats_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: gatk_collectmultiplemetrics_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, gatk_CollectMultipleMetrics, {{ sample.name }}]
  methods: Alignment metrics, base distribution, insert size, quality,
    and other metrics for {{ sample.name }} ({{ aligner }}) were
    gathered with {{ constants.tools.gatk.verbose }}
    CollectMultipleMetrics.
  input: {{ bam_path }}
  walltime: "24:00:00"
  cpus: 16
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.gatk.module }}

    mkdir -p "{{ stats_dir }}"

    gatk CollectMultipleMetrics \
      --INPUT "{{ bam_path }}" \
      --OUTPUT "{{ stats_dir }}/{{ bam_path|basename }}" \
      {% if aligner == 'star' %}
      --REFERENCE_SEQUENCE "{{ constants.phoenix.star_fasta }}" \
      {% elif aligner == 'bwa' %}
      --REFERENCE_SEQUENCE "{{ constants.phoenix.reference_fasta }}" \
      {% endif %}
      --METRIC_ACCUMULATION_LEVEL null \
      --METRIC_ACCUMULATION_LEVEL LIBRARY \
      --METRIC_ACCUMULATION_LEVEL SAMPLE \
      --PROGRAM null \
      --PROGRAM CollectAlignmentSummaryMetrics \
      --PROGRAM CollectBaseDistributionByCycle \
      --PROGRAM CollectInsertSizeMetrics \
      --PROGRAM MeanQualityByCycle \
      --PROGRAM QualityScoreDistribution \
      --PROGRAM CollectGcBiasMetrics \
      --PROGRAM CollectSequencingArtifactMetrics \
      --PROGRAM CollectQualityYieldMetrics

{% endmacro %}


{% macro bam_qc_gatk_convertsequencingarrtifacttooxog(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set stats_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: gatk_convertsequencingarrtifacttooxog_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, stats, gatk_ConvertSequencingArtifactToOxoG, {{ sample.name }}]
  input: {{ bam_path }}
  after: gatk_collectmultiplemetrics_{{ sample.name }}_{{ aligner }}
  walltime: "24:00:00"
  cpus: 16
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.gatk.module }}

    gatk ConvertSequencingArtifactToOxoG \
      {% if aligner == 'star' %}
      --REFERENCE_SEQUENCE "{{ constants.phoenix.star_fasta }}" \
      {% elif aligner == 'bwa' %}
      --REFERENCE_SEQUENCE "{{ constants.phoenix.reference_fasta }}" \
      {% endif %}
      --INPUT_BASE "{{ stats_dir }}/{{ bam_path|basename }}"

{% endmacro %}


{% macro bam_qc_snpsniffer_geno(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set stats_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: snpsniffer_geno_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, genotype_concordance, snpSniffer, {{ sample.name }}]
  input: {{ bam_path }}
  cpus: 4
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.bcftools.module }}

    {# Genotype the 387 test positions across the genome, filter to calls with DP >= 5, sort, remove chr from contig names #}
    bcftools mpileup \
      --no-BAQ \
      --max-depth 5000 \
      --min-MQ 0 \
      --min-BQ 13 \
      {% if aligner == 'star' %}
      --fasta-ref "{{ constants.phoenix.star_fasta }}" \
      {% elif aligner == 'bwa' %}
      --fasta-ref "{{ constants.phoenix.reference_fasta }}" \
      {% endif %}
      --targets-file "{{ constants.phoenix.snpSniffer_sites }}" \
      {{ bam_path }} \
      | \
    bcftools call \
      --consensus-caller \
      --skip-variants indels \
      | \
    bcftools sort \
      | \
    bcftools annotate \
      --threads 2 \
      --include 'INFO/DP >= 5' \
      --rename-chrs "{{ constants.phoenix.bcftools_annotate_contig_update_ucsc2ensembl }}" \
      --output-type v \
      --output "{{ stats_dir }}/{{ bam_path|basename }}.snpSniffer.vcf"

{% endmacro %}
