# These macros are run on constitutional dna bams from the dna_alignment modules.

{% macro bam_qc_verifybamid2(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set stats_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}

- name: verifybamid2_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, constitutional_contamination_check, VerifyBamID, {{ sample.name }}]
  input: {{ bam_path }}
  cpus: 1
  mem: 4G
  walltime: "8:00:00"
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.verifybamid2_1_0_5.module }}

    mkdir -p "{{ stats_dir }}"

    {# Some resources are included in the VerifyBamID home dir #}
    VERIFY_BAM_ID_HOME="$(dirname $(dirname $(which VerifyBamID)))"

    VerifyBamID \
      --NumThread 4 \
      --UDPath "${VERIFY_BAM_ID_HOME}/resource/1000g.100k.b38.vcf.gz.dat.UD" \
      --MeanPath "${VERIFY_BAM_ID_HOME}/resource/1000g.100k.b38.vcf.gz.dat.mu" \
      --BedPath "${VERIFY_BAM_ID_HOME}/resource/1000g.100k.b38.vcf.gz.dat.bed" \
      {% if aligner == 'star' %}
      --Reference "{{ constants.phoenix.star_fasta }}" \
      {% elif aligner == 'bwa' %}
      --Reference "{{ constants.phoenix.reference_fasta }}" \
      {% endif %}
      --BamFile "{{ bam_path }}" \
      --Output "{{ stats_dir }}/{{ bam_path|basename }}.verifybamid2"

{% endmacro %}


{% macro freebayes_genotype_qc_vcf(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set temp %}temp/{{ sample.gltype }}/qc/freebayes_genotype/{{ sample.name }}{% endset %}
{% set outdir %}{{ sample.gltype }}/qc/freebayes_genotype/{{ sample.name }}{% endset %}

- name: freebayes_genotype_qc_vcf_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, constitutional_genotype_vcf, freebayes, {{ sample.name }}]
  input: {{ bam_path }}
  cpus: 4
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.freebayes_1_2.module }}
    module load {{ constants.tools.samtools_1_9.module }}

    mkdir -p "{{ temp }}/temp"
    mkdir -p "{{ outdir }}"

    freebayes \
      --ploidy 2 \
      --fasta-reference "{{ constants.phoenix.reference_fasta }}" \
      --targets /home/tgenjetstream/dev_binaries_and_databases/hg38.bed \
      "{{ bam_path }}" \
      > "{{ temp }}/{{ sample.name }}_{{ aligner }}_freebayes_qc.vcf"

    bcftools sort \
      --max-mem 768M \
      --temp-dir {{ temp }}/temp/ \
      --output-type z \
      --output-file "{{ outdir }}/{{ sample.name }}_{{ aligner }}_freebayes_qc.vcf.gz" \
      "{{ temp }}/{{ sample.name }}_{{ aligner }}_freebayes_qc.vcf"

    bcftools index --threads 4 --tbi --force "{{ outdir }}/{{ sample.name }}_{{ aligner }}_freebayes_qc.vcf.gz"

{% endmacro %}


{% macro sex_check(sample, aligner='bwa') %}
{% set bam_path %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set stats_dir %}{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}/stats{% endset %}
{% set output %}{{ stats_dir }}/{{ bam_path|basename }}.sexCheck.txt{% endset %}
{% set temp %}temp/{{ sample.gltype }}/alignment/{{ aligner }}/{{ sample.name }}{% endset %}
{% set vcf %}{{ temp }}/{{ bam_path|basename }}.sexCheck.vcf{% endset %}

- name: freebayes_sex_check_{{ sample.name }}_{{ aligner }}
  tags: [{{ sample.gltype }}, quality_control, constitutional_sex_check, freebayes, {{ sample.name }}]
  input: {{ bam_path }}
  output: {{ output }}
  cpus: 1
  mem: 2G
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.samtools_1_9.module }}
    module load {{ constants.tools.freebayes_1_2.module }}

    mkdir -p "{{ temp }}/temp"

    {# Generic variables #}
    SEX_DEFINING_THRESHOLD=0.950

    freebayes \
      --fasta-reference "{{ constants.phoenix.reference_fasta }}" \
      --targets "{{ constants.phoenix.sex_check_targets }}" \
      --variant-input "{{ constants.phoenix.sex_check_vcf }}" \
      --only-use-input-alleles \
      --min-alternate-count 2 \
      --min-alternate-fraction 0.05 \
      --min-coverage 5 \
      --vcf "{{ vcf }}" \
      {{ bam_path }}

      {# Capture the RG_SM tag that is in the VCF header #}
      SAMPLE=`grep "#CHROM" {{ vcf }} | cut -f10`

      {## Calculate needed values to determine the genetic sex of the individual ##}
      {# Determine the number of input positions that had at least 1x coverage, which is required for the variant to be listed #}
      POSITIONS_GENOTYPED=`bcftools view -H --types snps {{ vcf }} | wc -l`

      {# Some variants still have ./. genotypes, not exactly sure of the reason, likely covered but below quality requirements? #}
      MISSING_GENOTYPES=`bcftools view -H --types snps --include 'GT="mis"' {{ vcf }} | wc -l`

      {# Positions meeting requirements #}
      TESTED_GENOTYPES=`bcftools view -H --types snps --include 'FORMAT/DP[0]>=6 & GT!="mis"' {{ vcf }} | wc -l`

      {# Positions meeting requirements with homozygous genotypes 0/0, 1/1, 2/2, or 3/3 #}
      HOMOZYGOUS_TOTAL=`bcftools view -H --types snps --include 'FORMAT/DP[0]>=6 & GT="hom"' {{ vcf }} | wc -l`

     {# Positions meeting requirements with homozygous reference calls 0/0 #}
      HOMOZYGOUS_REFERENCE=`bcftools view -H --types snps --include 'FORMAT/DP[0]>=6 & GT="ref" & GT="hom"' {{ vcf }} | wc -l`

      {# Positions meeting requirements with homozygous alternate calls 1/1, 2/2, or 3/3 #}
      HOMOZYGOUS_ALTERNATE=`bcftools view -H --types snps --include 'FORMAT/DP[0]>=6 & GT="alt" & GT="hom"' {{ vcf }} | wc -l`

      {# Positions meeting requirements with heterozygous calls; 0/1, 0/2, 0/3, 1/2, 1/3, or 2/3 #}
      HETEROZYGOUS=`bcftools view -H --types snps --include 'FORMAT/DP[0]>=6 & GT="het"' {{ vcf }} | wc -l`

      {# Calculate het rate #}
      HOMO_RATE=$(echo $HOMOZYGOUS_TOTAL $TESTED_GENOTYPES | awk '{printf "%.3f\n", $1/$2}')

      {# Predict Sex #}
      SEX=$(echo ${SEX_DEFINING_THRESHOLD} ${HOMO_RATE} | awk '{if ($1 < $2) print "Male"; else print "Female"}')

      {## Print a results file with header and results ##}
      {# Print header #}
      echo -e BAM"\t"SAMPLE"\t"POSITIONS_GENOTYPED"\t"MISSING_GENOTYPES"\t"TESTED_GENOTYPES"\t"HOMOZYGOUS_TOTAL"\t"HOMOZYGOUS_REFERENCE"\t"HOMOZYGOUS_ALTERNATE"\t"HETEROZYGOUS"\t"HOMOZYGOUS_RATE"\t"SEX_PREDICTION > {{ output }}
      {# Print results #}
      echo -e {{ bam_path|basename }}"\t"${SAMPLE}"\t"${POSITIONS_GENOTYPED}"\t"${MISSING_GENOTYPES}"\t"${TESTED_GENOTYPES}"\t"${HOMOZYGOUS_TOTAL}"\t"${HOMOZYGOUS_REFERENCE}"\t"${HOMOZYGOUS_ALTERNATE}"\t"${HETEROZYGOUS}"\t"${HOMO_RATE}"\t"${SEX} >> {{ output }}


{% endmacro %}