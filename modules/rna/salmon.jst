{% from 'utilities/remove_files.jst' import remove_files with context %}

# Run Salmon RNA Quantification
{% macro salmon(sample) %}
{% set temp_dir %}temp/{{ sample.gltype }}/quant/salmon/{{ sample.name }}{% endset %}
{% set results_dir %}{{ sample.gltype }}/quant/salmon/{{ sample.name }}{% endset %}

{% set r1fqlist = [] %}
{% set r2fqlist = [] %}
{% for rgid, rg in sample.read_groups.items() %}
    {% for fq in rg.data_files|selectattr('fastqCode', 'eq', 'R1') %}
        {% do r1fqlist.append('"temp/fastqs/' + (fq.basename) + '"') %}
    {% endfor %}
    {% for fq in rg.data_files|selectattr('fastqCode', 'eq', 'R2') %}
        {% do r2fqlist.append('"temp/fastqs/' + (fq.basename) + '"') %}
    {% endfor %}
{% endfor %}

- name: salmon_quant_cdna_{{ sample.name }}
  tags: [{{ sample.gltype }}, transcriptome, quantify_expression, salmon_fastqs, {{ sample.name }}]
  methods: >
    Transcript quantification for {{ sample.name }} was performed with
    {{ constants.tools.salmon.verbose }} using the cDNA index.
  reset: predecessors
  input:
    - {{ constants.phoenix.salmon_index }}
    - {{ constants.phoenix.gtf }}
  {% for fq in r1fqlist %}
    - {{ fq }}
  {% endfor %}
  {% for fq in r2fqlist %}
    - {{ fq }}
  {% endfor %}
  output:
    - {{ results_dir }}/{{ sample.name }}.transcripts.sf
    - {{ results_dir }}/{{ sample.name }}.genes.sf
    - {{ results_dir }}/{{ sample.name }}.counts.json
  cpus: 10
  mem: 20G
  walltime: "24:00:00"
  docker_image: {{ constants.docker_server }}/tgen_phoenix_salmon_quant_cdna:{{ constants.docker_images_tag }}
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.salmon.module }}

    mkdir -p "{{ temp_dir }}"
    mkdir -p "{{ results_dir }}"

    salmon quant \
      --validateMappings \
      --seqBias \
      --gcBias \
      --threads 10 \
      --libType "{{ constants.phoenix.strandedness_options[sample.strandedness].salmon }}" \
      --index "{{ constants.phoenix.salmon_index }}" \
      --geneMap "{{ constants.phoenix.gtf }}" \
      -1 {{ r1fqlist|join(' ') }} \
      {% if r2fqlist %}
      -2 {{ r2fqlist|join(' ') }} \
      {% endif %}
      --output "{{ temp_dir }}"

    {# Remove unwanted ENST #}
    gawk -F'\t' 'FNR == NR {a[$1]=$1;next} !($1 in a) { OFS = "\t" ; print $0 }' {{ constants.phoenix.ig_ENST_filter }} {{ temp_dir }}/quant.sf > {{ temp_dir }}/filtered_quant.sf

    {# Calculate SUM of number of reads divided by Effective length fot TPM calculation #}
    TPMSUM=$(gawk -F'\t' 'BEGIN { SUM = 0 } NR > 1 { SUM = SUM + ($5/$3)} END { print SUM }' {{ temp_dir }}/filtered_quant.sf)

    {# Recalulate TPM for each ENST #}
    gawk -F'\t' -v TPMSUM=${TPMSUM} 'NR == 1 { OFS = "\t" ; print $0 } ;
            NR > 1 { OFS = "\t" ; $4 = 1000000 * ( $5 / $3 ) / TPMSUM ; print $0 } ' {{ temp_dir }}/filtered_quant.sf > {{ temp_dir }}/{{ sample.name }}_filtered.transcripts.sf

    {# Map each ENST to it's ENSG #}
    gawk -F'\t' 'BEGIN{ OFS = "\t" ; print "Name","Gene","TPM"  }
            FNR==NR{a[$2]=$1; next}
            ($1 in a) { OFS = "\t" ; print $1,a[$1],$4 }' {{ constants.phoenix.ref_flat }} {{ temp_dir }}/{{ sample.name }}_filtered.transcripts.sf > {{ temp_dir }}/filtered_recalculated_quant_with_ENSG.sf

    {# Sum the transcript TPM's for each gene to create final filtered Gene level TPM file #}
    gawk -F'\t' 'BEGIN{OFS = "\t" ; print "Name","TPM"}
            NR> 1 { a[$2]+=$3 }
            END { for (x in a) { OFS = "\t" ; print x,a[x] }}' {{ temp_dir }}/filtered_recalculated_quant_with_ENSG.sf > {{ temp_dir }}/{{ sample.name }}_filtered.genes.sf

    {# Save back what we need and nuke the rest #}
    mv "{{ temp_dir }}/quant.sf" "{{ results_dir }}/{{ sample.name }}.transcripts.sf"
    mv "{{ temp_dir }}/{{ sample.name }}_filtered.transcripts.sf" "{{ results_dir }}"
    mv "{{ temp_dir }}/quant.genes.sf" "{{ results_dir }}/{{ sample.name }}.genes.sf"
    mv "{{ temp_dir }}/{{ sample.name }}_filtered.genes.sf" "{{ results_dir }}"
    mv "{{ temp_dir }}/lib_format_counts.json" "{{ results_dir }}/{{ sample.name }}.counts.json"

    {# Remove the remaining files #}
    {% set task %}salmon_quant_cdna_{{ sample.name }}{% endset %}
    {% set directory %}{{ temp_dir }}{% endset %}
    {{- remove_files(directory,none,task) }}

{% endmacro %}