{% macro starsolo(files) %}
{% set libraries = files|groupby('rglb') %}

{% for library, datafiles in libraries %}
{% set sample = datafiles[0] %}
{% set star_index_size %}{{ sample.read_length|default(100) }}bpReads{% endset %}
{% set star_index = constants.phoenix.star_indices[star_index_size] %}
{% set barcode_path = constants.phoenix.barcodes_path %}
{% set outdir %}{{ sample.gltype }}/starSOLO/{{ sample.name }}_{{ library }}/{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/starSOLO/{{ sample.name }}_{{ library }}/fastqs/{% endset %}

{# Local Temp Variables #}
{% set CDNA_LIST = [] %}
{% set CB_UMI_LIST = [] %}
{% set BARCODE = "" %}

{# Setting barcodes based on configuration
Cell Barcode Whitelist NOTES:
PATH = /packages/cellranger/3.0.2/cellranger-cs/3.0.2/lib/python/cellranger/barcodes
Single Cell 5' Gene Expression, transcript on R1 only = 737K-august-2016.txt
Single Cell 5' Gene Expression, transcript on R2 only = 737K-august-2016.txt
Single Cell 5' Gene Expression, paired-end = 737K-august-2016.txt
Single Cell V(D)J, transcript on R2 only = 737K-august-2016.txt
Single Cell V(D)J = 737K-august-2016.txt
CHEMISTRY_SC3P_V1 = 737K-april-2014_rc.txt
CHEMISTRY_SC3P_V2 = 737K-august-2016.txt
CHEMISTRY_SC3P_V3 = 3M-february-2018.txt.gz #}
{% if sample.assayCode == "X3SCR" %}
    {% set BARCODE %}{{ barcode_path }}/737K-april-2014_rc.txt{% endset %}
{% elif sample.assayCode == "XCSCR" %}
    {% set BARCODE %}{{ barcode_path }}/737K-august-2016.txt{% endset %}
{% elif sample.assayCode == "X5SCR" %}
    {% set BARCODE %}{{ barcode_path }}/737K-august-2016.txt{% endset %}
{% elif sample.assayCode == "X3SC3" %}
    {% set BARCODE %}{{ barcode_path }}/3M-february-2018.txt.gz{% endset %}
{% else %}
    {% set BARCODE %}{{ barcode_path }}/737K-august-2016.txt{% endset %}
{% endif %}

{# Generating input lists #}
{% for rgid, rg in datafiles|groupby('rgid') %}
  {% set r1fastq = rg|selectattr('fastqCode', 'eq', 'R1')|first %}
  {% set r1fastq %}{{ r1fastq.basename }}{% endset %}
  {% do CB_UMI_LIST.append(r1fastq) %}

  {% set r2fastq = rg|selectattr('fastqCode', 'eq', 'R2')|first %}
  {% set r2fastq %}{{ r2fastq.basename }}{% endset %}
  {% do CDNA_LIST.append(r2fastq) %}
{% endfor %}

- name: starsolo_count_{{ sample.name }}
  tags: [{{ sample.gltype }}, single_cell, starsolo_count, {{ sample.name }}]
  methods: >
    Alignment and quantification for {{ sample.name }} was performed with
    {{ constants.tools.star_2_7_3a.verbose }} using the genome index.
  input:
  {% for fq in datafiles %}
      - temp/fastqs/{{ fq.basename }}
  {% endfor %}
  output: {{ outdir }}
  cpus: 20
  mem: 120G
  walltime: "48:00:00"
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.star_2_7_3a.module }}

    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"
    mkdir -p "{{ outdir }}"

    {% for file in datafiles %}
    ln -rs "temp/fastqs/{{ file.basename }}" "{{ temp_dir }}/{{ file.basename }}"
    {% endfor %}

    {#
    Setting to "Within" causes a segmentation fault, as does "Within KeepPairs"
    cDNA read length-1 --> MUST MATCH THE VALUE USED FOR GENOME GENERATION used in pass-1 to add
    Currently --soloFeatures GeneFull causes segmentation fault when used in conjuction with
    any other soloFeature.
    #}
    ( cd {{ temp_dir }} && STAR \
      --runMode alignReads \
      --twopassMode Basic \
      --runThreadN 19 \
      --genomeLoad NoSharedMemory \
      --sjdbOverhang 99 \
      --readFilesType Fastx \
      --readFilesIn {{ CDNA_LIST|join(',') }} {{ CB_UMI_LIST|join(',') }} \
      --readFilesCommand zcat \
      --outFileNamePrefix {{ sample.name }}_{{ library }}_ \
      --outSAMtype BAM SortedByCoordinate \
      --outSAMmode Full \
      --outSAMunmapped None \
      --outSAMmapqUnique 255 \
      --outSAMattributes NH HI AS nM CR CY UR UY \
      --soloType CB_UMI_Simple \
      --soloCBwhitelist {{ BARCODE }} \
      --soloFeatures Gene SJ GeneFull Transcript3p \
      --soloCBmatchWLtype 1MM multi pseudocounts \
      --soloUMIdedup 1MM_All \
      --soloUMIfiltering MultiGeneUMI \
      --soloCBstart 1 \
      --soloCBlen 16 \
      --soloUMIstart 17 \
      --soloUMIlen 10 \
      --soloBarcodeReadLength 0 \
      --genomeDir {{ star_index }} \
      --soloStrand {{ sample.rnaStrandDirection }} \
      --soloOutFileNames Solo.out/ {{ sample.name }}_genes.tsv {{ sample.name }}_barcodes.tsv {{ sample.name }}_matrixGene.mtx {{ sample.name }}_matrixSJ.mtx {{ sample.name }}_matrixGeneFull.mtx {{ sample.name }}_matrixTranscripts3p.mtx )

    # Update permissions so files are readable by all users (first make all folders executable recursively so they can be navigated, then make all files readable)
    chmod -R a+X {{ temp_dir }}{{ sample.name }}_{{ library }}_Solo.out
    chmod -R +r {{ temp_dir }}{{ sample.name }}_{{ library }}_Solo.out

    # Move results to output directory
    mv {{ temp_dir }}{{ sample.name }}_{{ library }}_Solo.out/* {{ outdir }}

{% endfor %}
{% endmacro %}
