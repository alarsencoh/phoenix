#!/usr/bin/env bash

### GOAL: Code to genotype DNA defined variants in a matching RNA sample

### Design: Leverage the genotyping mode of freebayes to independently genotype matching RNA
#               - genotyping mode can take a list of variants from a VCF, provide bgzip compressed and indexed merge.vcf file
#               - use bedtools to create a dynamic 100bp padded and collapsed set of intervals around variants of interest
#               - use bcftools to merge and annotate intermediate files to ensure all variants get an RNA count value
#               - when no reads exist at a location the REF and ALT counts are set to 0

### Testing: 4 CPU job request, K1IDT exome

- name: rna_check_variant_{{ sample }}
  tags: [bcftools, annotation]
  input:
    - {{  }}
  output: {{  }}
  walltime: "8:00:00"
  cpus: 4
  cmd: |
  # Load required modules
  module load {{ constants.tools.samtools_1_9.module }}
  module load {{ constants.tools.bedtools_2_26_0.module }}
  module load {{ constants.tools.freebayes_1_2.module }}

  {{ if MATCHED_RNA|default(true) }}
    echo "Adding RNA header lines to the merged VCF file"

    # Write the needed header lines to a temporary file, which will be inserted into the VCF
    echo "##INFO=<ID=RNA_REF_COUNT,Number=1,Type=Integer,Description="Count of REF alleles seen in RNA">" >> temp_header
    echo "##INFO=<ID=RNA_ALT_FREQ,Number=1,Type=Integer,Description="Frequency of ALT alleles seen in RNA">" >> temp_header
    echo "##INFO=<ID=RNA_ALT_COUNT,Number=1,Type=Float,Description="Count of ALT alleles seen in RNA">" >> temp_header

    # Add the RNA count headers to the VCF, this ensures all .final.vcf files have the same header lines regardless of matching RNA files
    bcftools annotate \
        --threads 2 \
        --header-lines temp_header \
        --output-type z \
        --output Merged_VCF_final.vcf.gz \
        ${MERGE_VCF}

    bcftools index \
        --threads 2 \
        --tbi \
        Merged_VCF_final.vcf.gz

  elif [ ${MATCHED_RNA} = "Yes" ]
then

    echo "Calculating and adding RNA information to the merged VCF file"

    # Freebayes can genotype based on an input VCF but it must be bgzip compressed with a .tbi index
    # To speed up freebayes and call indels, provide a targets file, BED format, that is 100bp padded
    # Bcftools query,  to make a BED file: chr, pos (0-based), end pos (1-based)
    bcftools query -f '%CHROM\t%POS0\t%END\n' ${MERGE_VCF} > temp_variant_pos.bed
    # Bedtools slop is used to add 100bp padding and ensure padding does not extend off a contig, if so it is trimmed to the contig start or end
    bedtools slop -i temp_variant_pos.bed -g ${CONTIG_LENGTHS} -l 100 -r 100 > temp_intervals.bed
    # Bedtools merge is used to join any overlapping intervals created by the padding to prevent calling events twice
    bedtools merge -i temp_intervals.bed > temp_target_intervals.bed


    ### Call freebayes forcing genotyping even if only a single alternate allele is seen

    ## Limitation: Does not output anything at positions with no reads (ie. DP=0 is not seen)
    freebayes --fasta-reference ${REFERENCE} \
        --targets temp_target_intervals.bed \
        --variant-input ${MERGE_VCF} \
        --only-use-input-alleles \
        --min-alternate-count 1 \
        --min-alternate-fraction 0.0001 \
        --vcf ${RNA_BASENAME}_DnaVarInRNA.vcf \
        ${RNA_BAM}

    # Since the input variants are all normalized, use bcftools to normalize the RNA calls and remove any variant line with no ALT allele noted (ie. ALT = ".") (Largely a Seurat related bug)
    bcftools norm \
        -cs \
        --fasta-ref ${REFERENCE} \
        --multiallelics -any \
        ${RNA_BASENAME}_DnaVarInRNA.vcf \
        | \
        bcftools filter \
        --threads 2 \
        --exclude 'N_ALT==0' \
        --output-type z \
        --output ${RNA_BASENAME}_DnaVarInRNA_norm.vcf.gz \

    bcftools index \
        --threads 2 \
        --tbi \
        ${RNA_BASENAME}_DnaVarInRNA_norm.vcf.gz

    ## Create a new template DNA VCF the provides the full list of variants from the mergeVCF
    ## This is done to ultimately merge with the RNA variant calls that only exist when an ALT allele was observed
    ## So the DNA variant positions with no read coverage are missing in the RNA call set
    ## For final annotation we want to know if a position had no RNA reads as well, which the subsequent procedures provide

    # Remove the INFO and FORMAT columns from the merge.vcf along with the genotypes, we just want the variant positions and alleles
    bcftools annotate \
        --threads 2 \
        --remove INFO,FORMAT \
        ${MERGE_VCF} \
        | \
        bcftools view \
        --threads 2 \
        --drop-genotypes \
        --output-type z \
        --output-file temp_DNA.vcf.gz

    bcftools index \
        --threads 2 \
        --tbi \
        temp_DNA.vcf.gz

    # Merge the RNA calls into the temp DNA to figure out which variants had no coverage
    bcftools merge \
        --threads 2 \
        --missing-to-ref \
        --output-type z \
        --output merged_RNA.vcf.gz \
        temp_DNA.vcf.gz \
        ${RNA_BASENAME}_DnaVarInRNA_norm.vcf.gz

    ## Now Create a file that can be used to annotate the existing merged VCF

    # Write the header for a new RNA VCF
    echo "##fileformat=VCFv4.2" > temp_RNA.vcf
    echo "##INFO=<ID=RNA_REF_COUNT,Number=1,Type=Integer,Description="Count of REF alleles seen in RNA">" >> temp_RNA.vcf
    echo "##INFO=<ID=RNA_ALT_FREQ,Number=1,Type=Integer,Description="Frequency of ALT alleles seen in RNA">" >> temp_RNA.vcf
    echo "##INFO=<ID=RNA_ALT_COUNT,Number=1,Type=Float,Description="Count of ALT alleles seen in RNA">" >> temp_RNA.vcf
    echo $'#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO' >> temp_RNA.vcf

    # Print a temp file with the variant info and the split AD counts
    bcftools query \
        --format '%CHROM\t%POS\t%REF\t%ALT\t[ %AD{0}]\t[ %AD{1}]\n' \
        merged_RNA.vcf.gz \
        > temp_RNA_Counts.txt

    # Create a temp VCF with RNA INFO keys
    # Need to deal with a variety of observed allele scenarios
    # awk if, elseif decision tree to parse the temp_RNA_Counts.txt into a VCF with proper header for final annotation step
    awk '{
      OFS = "\t" ;
      if ( $5 == "." && $6 == "." )
        print $1, $2, ".", $3, $4, ".", ".", "RNA_REF_COUNT=0;RNA_ALT_COUNT=0;RNA_ALT_FREQ=0.00";
      else if ( $5 >= 1 && $6 >= 1 )
        print $1, $2, ".", $3, $4, ".", ".", "RNA_REF_COUNT="$5";RNA_ALT_COUNT="$6";RNA_ALT_FREQ="$6/($5+$6);
      else if ( $5 == "." && $6 >= 1 )
        print $1, $2, ".", $3, $4, ".", ".", "RNA_REF_COUNT=0;RNA_ALT_COUNT="$6";RNA_ALT_FREQ=1.0";
      else if ( $5 >= 1 && $6 == "." )
        print $1, $2, ".", $3, $4, ".", ".", "RNA_REF_COUNT="$5";RNA_ALT_COUNT=0;RNA_ALT_FREQ=0.00";
      else if ( $5 >= 1 && $6 == 0 )
        print $1, $2, ".", $3, $4, ".", ".", "RNA_REF_COUNT="$5";RNA_ALT_COUNT=0;RNA_ALT_FREQ=0.00";
      else if ( $5 == 0 && $6 >= 1 )
        print $1, $2, ".", $3, $4, ".", ".", "RNA_REF_COUNT=0;RNA_ALT_COUNT="$6";RNA_ALT_FREQ=1.00";
      else if ( $5 == 0 && $6 == 0 )
        print $1, $2, ".", $3, $4, ".", ".", "RNA_REF_COUNT=0;RNA_ALT_COUNT=0;RNA_ALT_FREQ=0.00";
      }' temp_RNA_Counts.txt >> temp_RNA.vcf

    # Compress and index to prepare for annotation step
    bcftools view \
        --threads 2 \
        --output-type z \
        --output-file temp_RNA.vcf.gz \
        temp_RNA.vcf

    bcftools index \
        --threads 2 \
        --tbi \
        temp_RNA.vcf.gz

    # Annotate the original mergeVCF output with the RNA INFO keys
    # Since the annotation VCF only has the 3 INFO keys of interest, the field definition is all INFO keys
    bcftools annotate \
        --threads 2 \
        --annotations temp_RNA.vcf.gz \
        --columns "INFO" \
        --output-type z \
        --output Merged_plus_RNA.vcf.gz \
        ${MERGE_VCF}

    bcftools index \
        --threads 2 \
        --tbi \
        Merged_plus_RNA.vcf.gz

else
    echo ERROR - RNA COMPARISON NOT DEFINED
fi