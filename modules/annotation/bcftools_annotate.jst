{%- macro bcftools_annotate(sample_or_pair, temp_dir, after_task, input_vcf, taskPrefix, variant_caller, analysis_type, output_vcf, temp_vcf, aligner, snpeff_flag, vep_flag, task_type) %}
{%- set output_bcf %}{{ temp_dir }}/{{ sample_or_pair.name }}.{{ aligner }}.{{ variant_caller }}.db.bcf{% endset %}
- name: bcftools_annotate_{{ variant_caller }}_{{ sample_or_pair.name }}_{{ aligner }}
  tags: [{{ sample_or_pair.name }}, {{ analysis_type }}, {{ variant_caller }}, {{ task_type }}]
  after: {{ after_task }}
  walltime: "8:00:00"
  cpus: 4
  cmd: |
    set -euv
    set -o pipefail

    module load {{ constants.tools.samtools_1_9.module }}

    mkdir -p "{{ temp_dir }}"

    # we need to convert whatever vcf type we are given into a bcf (bcftools loves bcfs)
    # also create a temp bcf that we will use for all annotation runs
    bcftools view \
      --threads 4 \
      --output-type b \
      --output-file "{{ output_bcf }}" \
      "{{ input_vcf }}"

    bcftools index --threads 4 --force "{{ output_bcf }}"

    {% if tasks[taskPrefix+"_"+analysis_type+"_annotate_vcfs_bcftools_dbsnp_v152"]|default(true) %}
    # annotate with dbsnp
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.dbsnp_v152 }}" \
      --mark-sites DBSNPv152 \
      --columns ID \
      --output-type b \
      --output "{{ temp_dir }}/tempout.bcf" \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ temp_dir }}/tempout.bcf" "{{ output_bcf }}"

    bcftools index --threads 4 --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[taskPrefix+"_"+analysis_type+"_annotate_vcfs_bcftools_gnomad_exome_v2_1_1_liftover"]|default(true) %}
    # annotate with gnomad exome
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.gnomad_exome_v2_1_1_liftover }}" \
      --mark-sites GNOMAD_EXOME \
      --output-type b \
      --output "{{ temp_dir }}/tempout.bcf" \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ temp_dir }}/tempout.bcf" "{{ output_bcf }}"

    bcftools index --threads 4 --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[taskPrefix+"_"+analysis_type+"_annotate_vcfs_bcftools_gnomad_genome_v2_1_1_liftover"]|default(true) %}
    # annotate with gnomad genome
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.gnomad_genome_v2_1_1_liftover }}" \
      --mark-sites GNOMAD_GENOME \
      --output-type b \
      --output "{{ temp_dir }}/tempout.bcf" \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ temp_dir }}/tempout.bcf" "{{ output_bcf }}"

    bcftools index --threads 4 --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[taskPrefix+"_"+analysis_type+"_annotate_vcfs_bcftools_cosmic_coding_v89"]|default(true) %}
    # annotate with cosmic
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.cosmic_coding_v89 }}" \
      --mark-sites COSMIC \
      --output-type b \
      --output "{{ temp_dir }}/tempout.bcf" \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ temp_dir }}/tempout.bcf" "{{ output_bcf }}"

    bcftools index --threads 4 --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[taskPrefix+"_"+analysis_type+"_annotate_vcfs_bcftools_cosmic_noncoding_v89"]|default(true) %}
    # annotate with cosmic_nc
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.cosmic_noncoding_v89 }}" \
      --mark-sites COSMIC_NC \
      --output-type b \
      --output "{{ temp_dir }}/tempout.bcf" \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ temp_dir }}/tempout.bcf" "{{ output_bcf }}"

    bcftools index --threads 4 --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[taskPrefix+"_"+analysis_type+"_annotate_vcfs_bcftools_clinvar_20190715"]|default(true) %}
    # annotate with clinvar
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.clinvar_20190715 }}" \
      --mark-sites CLINVAR \
      --output-type b \
      --output "{{ temp_dir }}/tempout.bcf" \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ temp_dir }}/tempout.bcf" "{{ output_bcf }}"

    bcftools index --threads 4 --force "{{ output_bcf }}"
    {% endif %}

    # convert back to vcf.gz for the average users
    {% if snpeff_flag or vep_flag %}

    bcftools view \
    --threads 4 \
    --output-type z \
    --output-file "{{ temp_vcf }}" \
    "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ temp_vcf }}"
    bcftools index --threads 4 --force "{{ temp_vcf }}"

    {% else %}

    bcftools view \
    --threads 4 \
    --output-type z \
    --output-file "{{ output_vcf }}" \
    "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_vcf }}"
    bcftools index --threads 4 --force "{{ output_vcf }}"

    {% endif -%}
{% endmacro -%}
