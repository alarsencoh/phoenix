{% macro bcftools_annotate(results_dir, input_vcf, output_bcf, output_vcf, subtype, prefix, variant_caller) %}

- name: bcftools_annotate_{{ variant_caller }}_{{ input_vcf }}
  tags: [bcftools, annotation]
  input:
    - {{ input_vcf }}
  output: {{ output_bcf }}
  walltime: "8:00:00"
  cpus: 4
  cmd: |
    set -euv
    set -o pipefail

    module load {{ constants.tools.samtools_1_9.module }}

    # we need to convert whatever vcf type we are given into a bcf (bcftools loves bcfs)
    # also create a temp bcf that we will use for all annotation runs
    bcftools view \
      --threads 4 \
      --output-type b \
      --output "{{ output_bcf }}" \
      "{{ input_vcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_bcf }}"

    {% if tasks[prefix+"_"+subtype+"_annotate_vcfs_bcftools_dbsnp"]|default(true) %}
    # annotate with dbsnp
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.dbsnp }}" \
      --mark-sites DBSNPv152 \
      --columns ID \
      --output-type b \
      --output "{{ results_dir }}"/tempout.bcf \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ results_dir }}"/tempout.bcf "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[prefix+"_"+subtype+"_annotate_vcfs_bcftools_gnomad_exome"]|default(true) %}
    # annotate with gnomad exome
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.gnomad_exome }}" \
      --mark-sites GNOMAD_EXOME \
      --output-type b \
      --output "{{ results_dir }}"/tempout.bcf \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ results_dir }}"/tempout.bcf "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[prefix+"_"+subtype+"_annotate_vcfs_bcftools_gnomad_genome"]|default(true) %}
    # annotate with gnomad genome
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.gnomad_genome }}" \
      --mark-sites GNOMAD_GENOME \
      --output-type b \
      --output "{{ results_dir }}"/tempout.bcf \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ results_dir }}"/tempout.bcf "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[prefix+"_"+subtype+"_annotate_vcfs_bcftools_cosmic_coding"]|default(true) %}
    # annotate with cosmic
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.cosmic }}" \
      --mark-sites COSMIC \
      --output-type b \
      --output "{{ results_dir }}"/tempout.bcf \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ results_dir }}"/tempout.bcf "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[prefix+"_"+subtype+"_annotate_vcfs_bcftools_cosmic_noncoding"]|default(true) %}
    # annotate with cosmic_nc
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.cosmic_nc }}" \
      --mark-sites COSMIC_NC \
      --output-type b \
      --output "{{ results_dir }}"/tempout.bcf \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ results_dir }}"/tempout.bcf "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_bcf }}"
    {% endif %}

    {% if tasks[prefix+"_"+subtype+"_annotate_vcfs_bcftools_clinvar"]|default(true) %}
    # annotate with clinvar
    bcftools annotate \
      --threads 4 \
      --annotations "{{ constants.phoenix.clinvar }}" \
      --mark-sites CLINVAR \
      --output-type b \
      --output "{{ results_dir }}"/tempout.bcf \
      "{{ output_bcf }}"

    # move tempout to tempin for next step
    mv "{{ results_dir }}"/tempout.bcf "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_bcf }}"
    {% endif %}

    # convert back to vcf.gz for the average users
    bcftools view \
    --threads 4 \
    --output-type z \
    --output "{{ output_vcf }}"
    "{{ output_bcf }}"

    bcftools index --threads 4 --tbi --force "{{ output_vcf }}"

{% endmacro %}
