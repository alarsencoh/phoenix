{% macro delly_somatic(pair, aligner='bwa') %}
{% set normal_bam %}{{ pair.normal.gltype }}/alignment/{{ aligner }}/{{ pair.normal.name }}/{{ pair.normal.name }}.{{ aligner }}.bam{% endset %}
{% set tumor_bam %}{{ pair.tumor.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam{% endset %}
{% set pair_dir %}{{ pair.gltype }}/somatic_structural_calls/delly/{{ pair.name }}{% endset %}
{% set run_dir %}temp/{{ pair.gltype }}/somatic_structural_calls/delly/{{ pair.name }}{% endset %}
{% set all_vcf %}{{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.allCalls.vcf{% endset %}
{% set pass_vcf %}{{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.passOnly.vcf{% endset %}

{% for SVTYPE in [DEL, DUP, INS, INV, TRA] %}
- name: delly_{{ pair.name }}_{{ aligner }}_{{ SVTYPE }}
  tags: [{{ pair.gltype }}, somatic, delly, {{ pair.name }}]
  input:
    - {{ normal_bam }}
    - {{ tumor_bam }}
  output:
    - {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.{{ SVTYPE }}.bcf
  cpus: 8
  walltime: "24:00:00"
  cmd: |
    cd {{ run_dir }}
    set -eu
    set -o pipefail

    module load {{ constants.tools.delly_0_7_6.module }}

    {% set sv_bcf %}{{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.{{ SVTYPE }}.bcf{% endset %}
    {% set filt_sv = {"DEL": "--minsize 2000 --maxsize 500000000", "DUP": "--minsize 100 --maxsize 500000000", "INS": "--minsize 5 --maxsize 87", "INV": "--minsize 100 --maxsize 500000000", "TRA": "--minsize 500 --maxsize 500000000"}[SVTYPE] | default("--minsize 500 --maxsize 500000000") -%}
    {% set filt_bcf %}{{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.{{ SVTYPE }}.flt.bcf{% endset %}
    {# delly has the option to add an exclusion file via --exclude #}
    delly call \
     --svtype {{ SVTYPE }} \
     --genome {{ constants.phoenix.reference_fasta }} \
     --map-qual 1 \
     --mad-cutoff 9 \
     --outfile {{ sv_bcf }} \
     {{ tumor_bam }} {{ normal_bam }}

    delly filter \
     --filter somatic \
     --alataf 0.1 \
     --ratiogeno 0.75 \
     --coverage 5 \
     --controlcontamination 0 \
     {{ filt_sv }} \
     --outfile {{ filt_bcf }} \
     {{ sv_bcf }}

{{ endfor }}

- name: delly_merge_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, somatic, delly, {{ pair.name }}]
  input:
    {% for SVTYPE in [DEL, DUP, INS, INV, TRA] %}
    - {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.{{ SVTYPE }}.flt.bcf
    {% endfor %}
  output:
    - {{ all_vcf }}
    - {{ pass_vcf }}
  cpus: 8
  walltime: "24:00:00"
  cmd: |
    cd {{ run_dir }}

    module load {{ constants.tools.samtools_1_9_92_gcb6b3b5.module }}

    bcftools concat \
      {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.DEL.flt.bcf \
      {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.DUP.flt.bcf \
      {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.INS.flt.bcf \
      {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.INV.flt.bcf \
      {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.TRA.flt.bcf 2>/dev/null | \
      tee >(cat - | grep -E "^#" | grep -vE "##bcftools_viewCommand|^#CHROM"  > header.vcfs.txt ) | tee >(cat - | grep -E "^#CHROM" > header.lineCHROM.txt ) | grep -vE "^#" | sort -k1,1V -k2,2n > body.vcfs.txt ;
    grep -E "^##bcftools_viewCommand" ${LVCFS[@]} | cut -d":" -f2 > header.bcfCommands.txt ;
    cat header.vcfs.txt header.bcfCommands.txt header.lineCHROM.txt body.vcfs.txt > {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.allCalls.vcf
    cat header.vcfs.txt header.bcfCommands.txt header.lineCHROM.txt ; cat body.vcfs.txt | awk '{FS=OFS="\t"} $7=="PASS" {print}' ) > {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.passOnly.vcf
    rm header.lineCHROM.txt header.vcfs.txt body.vcfs.txt header.bcfCommands.txt

- name: delly_annotate_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, somatic, delly, {{ pair.name }}]
  input:
    - {{ pass_vcf }}
  output:
    - {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.passOnly.ann.vcf
  cpus: 8
  walltime: "24:00:00"
  cmd:
    cd {{ run_dir }}

    {% set delly_scripts %}{{ constants.phoenix.delly_scripts }}{% endset %}
    {% set snpSift %}java -jar /packages/snpEff/snpEff_v4_3t_core/snpEff/SnpSift.jar{% endset %}
    {% set ANNO_VCF %}{{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.passOnly.vcf{% endset %}
    {% set SLOP %}1000{% endset %}

    {#
    # Generating exclusion list
    #}
    awk '{ print $1 }' {{ constants.phoenix.reference_fai }} > delly.co
    sed -n 25p delly.co > delly.chrM
    sed -n '456,$p' delly.co > delly.notCallingContigs
    cat delly.chrM delly.notCallingContigs > delly.excl
    rm delly.co delly.chrM delly.notCallingContigs

    {% set LIST_CONTIGS_TOBE_FILTERED_OUT %}delly.excl{% endset %}

    module load {{ constants.tools.python_3_6_0.module }}

    if [[ $(grep -m 1 -c "ENDPOSSV" {{ ANNO_VCF }} ) -ne 1 ]] ;
    then
            sed 's/ID=END/ID=ENDPOSSV/ ; s/;END=/;ENDPOSSV=/' {{ ANNO_VCF }} > {{ ANNO_VCF }}.mod
            python {{ delly_scripts }}addRC_to_Delly_VCF.py -i {{ ANNO_VCF }}.mod -t {{ TUMOR_BAM }} -n {{ NORMAL_BAM }} -s {{ SLOP }}
    else
            cp {{ ANNO_VCF }} {{ ANNO_VCF }}.mod_addDist.vcf
    fi

    {% set ANNO_VCF %}{{ ANNO_VCF }}.mod_addDist.vcf{% endset %}

    grep -E "^#" {{ ANNO_VCF }} ; cat {{ ANNO_VCF }} | {{ snpSift }} filter "( GEN[0].RCALT >= 5 && GEN[1].RCALT <=1 && GEN[0].RDISTDISC1 >= 100 && GEN[0].RDISTDISC2 >= 100 ) " | grep -vE "^#|{{ LIST_CONTIGS_TOBE_FILTERED_OUT }}" ) > {{ ANNO_VCF }}.flt.vcf

    python {{ delly_scripts }}svtop.delly.sv_annotation.parallel.py -a {{ constants.phoenix.delly_annotation }} -i {{ ANNO_VCF }}.flt.vcf -o {{ ANNO_VCF }}.flt.anno.final.vcf

{% endmacro %}