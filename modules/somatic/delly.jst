{% macro delly_somatic(pair, aligner='bwa') %}
{% set normal_bam %}{{ pair.normal.gltype }}/alignment/{{ aligner }}/{{ pair.normal.name }}/{{ pair.normal.name }}.{{ aligner }}.bam{% endset %}
{% set tumor_bam %}{{ pair.tumor.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam{% endset %}
{% set pair_dir %}{{ pair.gltype }}/somatic_structural_calls/delly/{{ pair.name }}{% endset %}
{% set run_dir %}temp/{{ pair.gltype }}/somatic_structural_calls/delly/{{ pair.name }}{% endset %}
{% set all_vcf %}{{ pair.name }}.{{ aligner }}.delly.allCalls.vcf{% endset %}
{% set pass_vcf %}{{ pair.name }}.{{ aligner }}.delly.passOnly.vcf{% endset %}
{% set variant_types=['DEL','DUP','INS','INV','TRA'] %}

{% for svtype in variant_types %}
- name: delly_{{ pair.name }}_{{ aligner }}_{{ svtype }}
  tags: [{{ pair.gltype }}, somatic, delly, {{ pair.name }}]
  input:
    - {{ normal_bam }}
    - {{ tumor_bam }}
  cpus: 8
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    {% set delly %}/home/tgenref/binaries/delly2/bin/0.7.6/delly{% endset %}
    {% set sv_bcf %}{{ pair.name }}.{{ aligner }}.delly.{{ svtype }}.bcf{% endset %}
    {% set filt_sv = {"DEL": "--minsize 2000 --maxsize 500000000", "DUP": "--minsize 100 --maxsize 500000000", "INS": "--minsize 5 --maxsize 87", "INV": "--minsize 100 --maxsize 500000000", "TRA": "--minsize 500 --maxsize 500000000"}[svtype] | default("--minsize 500 --maxsize 500000000") -%}
    {% set filt_bcf %}{{ pair.name }}.{{ aligner }}.delly.{{ svtype }}.flt.bcf{% endset %}
    {% set sample_file %}sample.{{ svtype }}.{{ pair.name }}.tsv{% endset %}

    mkdir -p "{{ run_dir }}"

    {{ delly }} call \
     --type {{ svtype }} \
     --genome {{ constants.phoenix.reference_fasta }} \
     --exclude {{ constants.phoenix.delly_exclusions }} \
     --map-qual 1 \
     --mad-cutoff 9 \
     --outfile {{ run_dir }}/{{ sv_bcf }} \
     {{ tumor_bam }} {{ normal_bam }}

    {# Creating a sample file for filter step #}
    echo -e "$(echo -e {{ pair.tumor.rgsm }} |  sed 's/\..*//')\ttumor\n$(echo -e {{ pair.normal.rgsm }} |  sed 's/\..*//')\tcontrol" > {{ sample_file }}

    {{ delly }} filter \
     --type {{ svtype }} \
     --filter somatic \
     --samples {{ sample_file }} \
     --altaf 0.1 \
     --ratiogeno 0.75 \
     --coverage 5 \
     --controlcontamination 0 \
     {{ filt_sv }} \
     --outfile {{ run_dir }}/{{ filt_bcf }} \
     {{ run_dir }}/{{ sv_bcf }}

    rm {{ sample_file }}

{% endfor %}

- name: delly_merge_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, somatic, delly, {{ pair.name }}]
  after:
    {% for svtype in variant_types %}
    - delly_{{ pair.name }}_{{ aligner }}_{{ svtype }}
    {% endfor %}
  input:
    {% for svtype in variant_types %}
    - {{ pair_dir }}/{{ pair.name }}.{{ aligner }}.delly.{{ svtype }}.flt.bcf
    {% endfor %}
  output:
    - {{ all_vcf }}
    - {{ pass_vcf }}
  cpus: 8
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.samtools_1_9_92_gcb6b3b5.module }}

    {% set merged_vcf %}{{ pair.name }}.{{ aligner }}.delly.merged.vcf{% endset %}

    cd {{ run_dir }}

    bcftools concat \
      {% for svtype in variant_types %}
      {{ pair.name }}.{{ aligner }}.delly.{{ svtype }}.flt.bcf \
      {% endfor %}
      --allow-overlaps \
      --output-type v \
      --output {{ merged_vcf }}

    ( cat {{ merged_vcf }} | grep -E "^#" | grep -vE "##bcftools_viewCommand|^#CHROM"  > header.vcfs.txt )
    ( cat {{ merged_vcf }} | grep -E "^#CHROM" > header.lineCHROM.txt )
    ( cat {{ merged_vcf }} | grep -vE "^#" | sort -k1,1V -k2,2n > body.vcfs.txt )
    cat header.vcfs.txt header.lineCHROM.txt body.vcfs.txt > {{ pair.name }}.{{ aligner }}.delly.allCalls.vcf
    ( cat header.vcfs.txt header.lineCHROM.txt ; cat body.vcfs.txt | awk '{FS=OFS="\t"} $7=="PASS" {print}' ) > {{ pass_vcf }}
    rm header.lineCHROM.txt header.vcfs.txt body.vcfs.txt {{ merged_vcf }}

- name: delly_annotate_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, somatic, delly, {{ pair.name }}]
  after: delly_merge_{{ pair.name }}_{{ aligner }}
  input:
    - {{ pass_vcf }}
  output:
    - {{ pair.name }}.{{ aligner }}.delly.passOnly.ann.vcf
  cpus: 8
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    {% set delly_scripts %}{{ constants.phoenix.delly_scripts }}{% endset %}
    {% set snpSift %}java -jar /packages/snpEff/snpEff_v4_3t_core/snpEff/SnpSift.jar{% endset %}
    {% set slop %}1000{% endset %}
    {% set ann_vcf %}{{ run_dir }}/{{ pass_vcf }}{% endset %}

    {#
    # Generating exclusion list
    # Potentially not needed when providing an exclusion list upstream
    #}
    {#    awk '{ print $1 }' {{ constants.phoenix.reference_fai }} > delly.co#}
    {#    sed -n 25p delly.co > delly.chrM#}
    {#    sed -n '456,$p' delly.co > delly.notCallingContigs#}
    {#    cat delly.chrM delly.notCallingContigs > delly.excl#}
    {#    rm delly.co delly.chrM delly.notCallingContigs#}
    {#    {% set list_of_contigs_to_filter_out %}delly.excl{% endset %}#}

    module load {{ constants.tools.python_3_6_0.module }}
    module load {{ constants.tools.bedtools_2_26_0.module }}

    if [[ $(grep -m 1 -c "ENDPOSSV" {{ ann_vcf }} ) -ne 1 ]] ;
    then
            sed 's/ID=END/ID=ENDPOSSV/ ; s/;END=/;ENDPOSSV=/' {{ ann_vcf }} > {{ ann_vcf }}.mod
            python {{ delly_scripts }}addRC_to_Delly_VCF.py -i {{ ann_vcf }}.mod -t {{ tumor_bam }} -n {{ normal_bam }} -s {{ slop }}
    else
            cp {{ ann_vcf }} {{ ann_vcf }}.mod_addDist.vcf
    fi

    {% set ann_vcf %}{{ ann_vcf }}.mod_addDist.vcf{% endset %}

    ( grep -E "^#" {{ ann_vcf }} ; cat {{ ann_vcf }} | {{ snpSift }} filter "( GEN[0].RCALT >= 5 && GEN[1].RCALT <=1 && GEN[0].RDISTDISC1 >= 100 && GEN[0].RDISTDISC2 >= 100 ) " ) > {{ ann_vcf }}.flt.vcf

    python {{ delly_scripts }}svtop.delly.sv_annotation.parallel.py -a {{ constants.phoenix.delly_annotation }} -i {{ ann_vcf }}.flt.vcf -o {{ ann_vcf }}.flt.anno.final.vcf

{% endmacro %}