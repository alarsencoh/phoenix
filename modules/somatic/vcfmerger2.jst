{% from 'modules/annotation/main.jst' import annotate_vcfs with context %}
{% from 'modules/somatic/rna_variant_check.jst' import add_rna_header_to_vcf with context %}
{% from 'modules/somatic/rna_variant_check.jst' import add_matched_rna with context %}

{% macro vcfmerger2(pair, aligner='bwa', taskPrefix='Genome') %}

{% set normal_bam %}{{ pair.normal.gltype }}/alignment/{{ aligner }}/{{ pair.normal.name }}/{{ pair.normal.name }}.{{ aligner }}.bam{% endset %}
{% set tumor_bam %}{{ pair.tumor.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam{% endset %}
{% set temp_dir %}temp/{{ pair.gltype }}/somatic_variant_calls/vcfmerger2/{{ pair.name }}_{{ aligner }}{% endset %}
{% set results_dir %}{{ pair.gltype }}/somatic_variant_calls/vcfmerger2/{{ pair.name }}{% endset %}
{% set merged_vcf %}{{ temp_dir }}/{{ pair.name }}.merged.vcf{% endset %}
{% set merged_vcf_gz %}{{ temp_dir }}/{{ pair.name }}.merged.vcf.gz{% endset %}
{% set output_vcf %}{{ results_dir }}/{{ pair.name }}.merged.vcf.gz{% endset %}

{% set vcfs_to_merge=[] %}

# Here we iterate over the callers for each pair calculating the necessary
# paths. Callers add themselves to the pair object when their macro is used.
{% for caller in pair.callers %}
{% set bam %}{{ pair.tumor.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam{% endset %}
{% set gzipped_path %}{{ pair.gltype }}/somatic_variant_calls/{{ caller }}/{{ pair.name }}/{{ pair.name }}.{{ aligner }}.{{ caller }}.pass.vcf.gz{% endset %}
{% set unzipped_path %}{{ temp_dir }}/{{ caller }}.vcf{% endset %}
{% set prepped_path %}{{ temp_dir }}/{{ caller }}.prepz.vcf{% endset %}
{% set filtered_path %}{{ temp_dir }}/{{ caller }}.filt.vcf{% endset %}
{% do vcfs_to_merge.append({
  'normal_bam': normal_bam,
  'tumor_bam': tumor_bam,
  'gzipped_path': gzipped_path, 
  'unzipped_path': unzipped_path,
  'prepped_path': prepped_path,
  'filtered_path': filtered_path
}) %}

- name: vcfmerger2_prep_{{ caller }}_{{ pair.name }}_{{ aligner }}
  tags: [vcfMerger2, {{ pair.name }}]
  input: {{ gzipped_path }}
  cpus: 2
  walltime: "4:00:00"
  cmd: |
    set -uev

    module load {{ constants.tools.vcfmerger2_0_7_5.module }}
    module load {{ constants.tools.samtools_1_9.module }}
    module load {{ constants.tools.rstats_3_4_1.module }}
    module load {{ constants.tools.phaser_1_1_1.module }}
    module load {{ constants.tools.python_3_6_0.module }}
    module load {{ constants.tools.bedtools_2_26_0.module }}
    module load {{ constants.tools.python_2_7_13.module }}
    module load {{ constants.tools.vt_0_57721.module }}
    
    mkdir -p "{{ temp_dir }}"
    gunzip -c "{{ gzipped_path }}" > "{{ unzipped_path }}"

    # Locate the prep_vcf.sh script relative to vcfMerger2.py
    PREPVCF="$(dirname $(dirname $(which vcfMerger2.py)))"/prep_vcfs_somatic/prep_vcf_somatic.sh
    WORKDIR=`pwd`

    ${PREPVCF} \
      --ref-genome "{{ constants.phoenix.reference_fasta }}" \
      --dir-work "{{ temp_dir }}" \
      --bam ${WORKDIR}/{{ bam }} \
      --toolname "{{ caller }}" \
      --normal-sname "{{ pair.normal.rgsm }}" \
      --tumor-sname "{{ pair.tumor.rgsm }}" \
      --vcf "{{ unzipped_path }}" \
      -o "{{ prepped_path }}"


- name: vcfmerger2_filter_{{ caller }}_{{ pair.name }}_{{ aligner }}
  tags: [vcfMerger2, {{ pair.name }}]
  after: vcfmerger2_prep_{{ caller }}_{{ pair.name }}_{{ aligner }}
  cpus: 2
  walltime: "4:00:00"
  cmd: |
    set -uev
    module load {{ constants.tools.samtools_1_9.module }}

    bcftools filter \
      -O v \
      --exclude 'FMT/DP<10 | FMT/AR[0]>=0.02 | FMT/AR[1]<0.05' \
      "{{ prepped_path }}" \
      > "{{ filtered_path }}"

{% endfor %}


- name: vcfmerger2_{{ pair.name }}_{{ aligner }}
  tags: [vcfMerger2, {{ pair.name }}]
  after:
  {% for caller in pair.callers %}
    - vcfmerger2_filter_{{ caller }}_{{ pair.name }}_{{ aligner }}
  {% endfor %}
  output: {{ merged_vcf_gz }}
  cpus: 4
  walltime: "4:00:00"
  cmd: |
    set -uev

    module load {{ constants.tools.vcfmerger2_0_7_5.module }}
    module load {{ constants.tools.samtools_1_9.module }}
    module load {{ constants.tools.rstats_3_4_1.module }}
    module load {{ constants.tools.phaser_1_1_1.module }}
    module load {{ constants.tools.python_3_6_0.module }}
    module load {{ constants.tools.bedtools_2_26_0.module }}
    module load {{ constants.tools.python_2_7_13.module }}
    module load {{ constants.tools.vt_0_57721.module }}

    mkdir -p "{{ results_dir }}"
    
    vcfMerger2.py \
      --skip-prep-vcfs \
      --precedence "{{ pair.callers|join('|') }}" \
      --toolnames "{{ pair.callers|join('|') }}" \
      --vcfs "{{ vcfs_to_merge|map(attribute='filtered_path')|join('|') }}" \
      -g "{{ constants.phoenix.reference_fasta }}" \
      --dict "{{ constants.phoenix.reference_dict }}" \
      --normal-sname "{{ pair.normal.rgsm }}" \
      --tumor-sname "{{ pair.tumor.rgsm }}" \
      -d "{{ temp_dir }}" \
      -o "{{ merged_vcf }}"


{% if 'rna_samples' in pair.tumor %}

  {{- add_matched_rna(merged_vcf_gz, output_vcf, pair, aligner, temp_dir) }}
  {% set after_task = 'add_matched_rna_'+pair.name+'_'+aligner %}

{% else %}

  {{- add_rna_header_to_vcf(merged_vcf_gz, output_vcf, pair, aligner , temp_dir)  }}
  {% set after_task = 'add_rna_header_to_vcf_'+pair.name+'_'+aligner %}

{% endif %}

{{- annotate_vcfs(pair, temp_dir, results_dir, after_task, output_vcf, taskPrefix, aligner, 'merged', 'somatic', 'snp_indel_caller') }}

{% endmacro %}
