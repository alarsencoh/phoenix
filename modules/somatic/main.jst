{% from 'modules/somatic/mutect2.jst' import mutect2 with context %}
{% from 'modules/somatic/lancet.jst' import lancet with context %}
{% from 'modules/somatic/manta.jst' import manta_somatic with context %}
{% from 'modules/somatic/strelka2.jst' import strelka2_somatic with context %}
{% from 'modules/somatic/octopus.jst' import octopus_somatic with context %}
{% from 'modules/somatic/tconut.jst' import tconut with context %}
{% from 'modules/somatic/vcfmerger2.jst' import vcfmerger2 with context %}

# Somatic tools generally operate on pairs of DNA samples (tumor/normal).
# WARNING - This pairs together all tumor and constitutional samples (of the same glType)
# without comparing any sample identifiers. This means multiple individuals in the same 
# project will be incorrectly paired together for somatic variant calling.

{% macro somatic_variant_calling(samples) %}
{% if somatic_variant_calling_pairs is defined %}
    # Pairs can be a predefined list of objects: 
    # [{"tumor": <tumor name>, "normal": <normal name>},...]
    {% set pairs = [] %}
    {% for pair in somatic_variant_calling_pairs %}
        {% set tumor = samples[pair.tumor] %}
        {% set normal = samples[pair.normal] %}
        {% set pair_name = normal.name + '-' + tumor.name %}
        {% do pairs.append({'name': pair_name, 'glType': normal.glType, 'normal': normal, 'tumor': tumor}) %}
    {% endfor %}
{% else %}
    # If pairs are not predefined, build up the somatic variant calling 
    # sample pairs object by pairing every tumor to every normal of the 
    # same glType. This will essentially permute every tumor-normal 
    # combination in the project. For projects with multiple individuals
    # this is likely NOT what you want to do, and pairs should be 
    # predefined in the config data. 
    {% set pairs = [] %}
    {% for tumor in samples.values() if tumor.subGroup|lower == 'tumor' and tumor.glType|lower == 'exome' %}
        {% for normal in samples.values() if normal.subGroup|lower == 'constitutional' and normal.glType|lower == 'exome' %}
            {% set pair_name = normal.name + '-' + tumor.name %}
            {% do pairs.append({'name': pair_name, 'glType': normal.glType, 'normal': normal, 'tumor': tumor}) %}
        {% endfor %}
    {% endfor %}
    {% for tumor in samples.values() if tumor.subGroup|lower == 'tumor' and tumor.glType|lower == 'genome' %}
        {% for normal in samples.values() if normal.subGroup|lower == 'constitutional' and normal.glType|lower == 'genome' %}
            {% set pair_name = normal.name + '-' + tumor.name %}
            {% do pairs.append({'name': pair_name, 'glType': normal.glType, 'normal': normal, 'tumor': tumor}) %}
        {% endfor %}
    {% endfor %}
{% endif %}

# Variant caller macros that are used should add their name to the pair.caller list 
# and then vcfmerger will merge all variants for callers that were used.
# For example: {# {% do pair.callers.append('mutect2') %} #}
# This requires that the output vcfs be located and named consitently, more details
# in vcfmerger2.jst
{% for pair in pairs %}{% do pair.update({'callers': []}) %}{% endfor %}

# Start of the macro calls that will actually add the tasks to the workflow
{% for pair in pairs if pair.glType == 'genome' %}
    {% if tasks.mutect2_genome|default(True) %}
        {{- mutect2(pair, aligner='bwa') }}
    {% endif %}

    {% if tasks.lancet_genome|default(True) %}
        {{- lancet(pair, aligner='bwa') }}
    {% endif %}

    {% if tasks.manta_somatic_genome|default(True) %}
        {{- manta_somatic(pair, aligner='bwa') }}
    {% endif %}
    
    {% if tasks.strelka2_somatic_genome|default(True) %}
        {{- strelka2_somatic(pair, aligner='bwa') }}
    {% endif %}

    {% if tasks.octopus_somatic_genome|default(True) %}
        {{- octopus_somatic(pair, aligner='bwa') }}
    {% endif %}

    {% if tasks.tconut_genome|default(True) %}
        {{- tconut(pair, aligner='bwa') }}
    {% endif %}
{% endfor %}

{% for pair in pairs if pair.glType == 'exome' %}
    {% if tasks.mutect2_exome|default(True) %}
        {{- mutect2(pair, aligner='bwa') }}
    {% endif %}

    {% if tasks.lancet_exome|default(True) %}
        {{- lancet(pair, aligner='bwa') }}
    {% endif %}

    {% if tasks.manta_somatic_exome|default(True) %}
        {{- manta_somatic(pair, aligner='bwa') }}
    {% endif %}
    
    {% if tasks.strelka2_somatic_exome|default(True) %}
        {{- strelka2_somatic(pair, aligner='bwa') }}
    {% endif %}

    {% if tasks.octopus_somatic_exome|default(True) %}
        {{- octopus_somatic(pair, aligner='bwa') }}
    {% endif %}

    {% if tasks.tconut_exome|default(True) %}
        {{- tconut(pair, aligner='bwa') }}
    {% endif %}
{% endfor %}

{% for pair in pairs %}
    {{- vcfmerger2(pair, aligner='bwa') }}
{% endfor %}

{% endmacro %}
