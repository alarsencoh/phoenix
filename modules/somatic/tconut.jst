{% macro tconut(pair, aligner='bwa') %}
{% set pair_dir %}{{ pair.glType }}/somatic_copy_number/tconut/{{ pair.name }}{% endset %}
{% set run_dir %}{{ pair_dir }}/{{ pair.name }}_{{ aligner }}_s2_run_dir{% endset %}

- name: tconut_call_snvs_{{ pair.name }}_{{ aligner }}
  tags: [tconut, {{ pair.glType }}]
  input:
    - {{ pair.normal.glType }}/alignment/{{ aligner }}/{{ pair.normal.name }}/{{ pair.normal.name }}.{{ aligner }}.bam
    - {{ pair.tumor.glType }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam
  cpus: 20
  walltime: "24:00:00"
  cmd: |
    set -euv
    module load {{ constants.tools.strelka_2_9_2.module }}
    module load {{ constants.tools.samtools_1_9.module }}
    module load {{ constants.tools.python_2_7_15.module }}

    # Purge any existing run files prior to starting
    rm -r "{{ run_dir }}" || true
    mkdir -p "{{ run_dir }}"

    # In order to restrict calling to only the specified regions
    # strelka requires a bed file (that has been bgzipped and indexed
    # with tabix). Here we generate that file on the fly, store in
    # the run dir, and pass the path to Strelka2.
    STRELKA_BED="{{ run_dir }}/callRegions.bed"
    TAB=$'\t'
    cat <<EOF > "${STRELKA_BED}"
    {% for contig in constants.phoenix.calling_contigs %}
    {{ contig.contig }}${TAB}0${TAB}{{ contig.length }}
    {% endfor %}
    EOF

    bgzip -f "${STRELKA_BED}"
    tabix -f -p bed "${STRELKA_BED}.gz"

    # Build the Strelka run file
    configureStrelkaGermlineWorkflow.py \
      {% if pair.glType == 'exome' %}
      --exome \
      {% endif %}
      --callRegions "${STRELKA_BED}.gz" \
      --bam "{{ pair.normal.glType }}/alignment/{{ aligner }}/{{ pair.normal.name }}/{{ pair.normal.name }}.{{ aligner }}.bam" \
      --bam "{{ pair.tumor.glType }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam" \
      --ref "{{ constants.phoenix.reference_fasta }}" \
      --runDir "{{ run_dir }}"

    # Execute on the local machine
    "{{ run_dir }}/runWorkflow.py" -m local -j 19


- name: tconut_annotate_snvs_{{ pair.name }}_{{ aligner }}
  tags: [tconut, bcftools, filter, {{ pair.glType }}]
  after: tconut_call_snvs_{{ pair.name }}_{{ aligner }}
  output: 
    - {{ pair.glType }}/somatic_copy_number/tconut/{{ pair.name }}/{{ pair.name }}.{{ aligner }}.tconut.vcf.gz
  cpus: 2
  cmd: |
    set -euv
    module load {{ constants.tools.samtools_1_9.module }}

    # Filter and annotate the snv vcf
    bcftools annotate \
      --threads 2 \
      -O z \
      -a "{{ constants.phoenix.dbsnp }}" \
      -c "ID,+INFO" \
      "{{ run_dir }}/results/variants/variants.vcf.gz" \
      -o "{{ pair.glType }}/somatic_copy_number/tconut/{{ pair.name }}/{{ pair.name }}.{{ aligner }}.tconut.vcf.gz"

    bcftools index -t "{{ pair.glType }}/somatic_copy_number/tconut/{{ pair.name }}/{{ pair.name }}.{{ aligner }}.tconut.vcf.gz"

    # Finally remove the run dir
    rm -r "{{ run_dir }}"


{% endmacro %}