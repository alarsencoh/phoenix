# Aligns fastqs for a sample using BWA MEM. Samples may have multiple read
# groups.
#
#     ? ?
#   ? -----fastqs--> temp/<sample.name>.bwa.bam
#     ? ?
#
# This alignment command prefix is shared by all modules using bwa
{% from 'modules/dna_alignment/bwa_mem.jst' import bwa_mem %}
{% from 'modules/read_group_line.jst' import read_group_line %}


# Shared MarkDuplicates command for split and non-split alignment
{% macro markduplicates(sample) %}
{% set platform = (sample.read_groups.values()|first).rgpm|default('') %}
{% if platform|lower in ['hiseq4000', 'novaseq6000'] %}
  {% set distance = 2500 %}
{% else %}
  {% set distance = 100 %}
{% endif %}
gatk MarkDuplicates \
  --java-options "-Xmx28G" \
  --TMP_DIR "temp" \
  --ASSUME_SORT_ORDER queryname \
  --CLEAR_DT false \
  --ADD_PG_TAG_TO_READS false \
  --OPTICAL_DUPLICATE_PIXEL_DISTANCE {{ distance }} 
{%- endmacro %}


# Shared SortSam command for split and non-split alignment
{% macro sortsam() %}
gatk SortSam \
  --java-options "-Xmx28G" \
  --TMP_DIR "temp" \
  --SORT_ORDER "coordinate" \
  --CREATE_INDEX true \
  --CREATE_MD5_FILE true \
  --MAX_RECORDS_IN_RAM 300000
{%- endmacro %}


# Start of tasks
# This macro aligns data for each read group with bwa mem then
# marks dups and sorts with GATK/Picard tools
{% macro bwa_mem_gatk_picard(sample) %}
{% for rgid, rg in sample.read_groups.items() %}
{% if rg.data_files|length != 2 %}
    {{ raise('This module only supports paired-end data with two fastqs per rg') }}
{% endif %}

{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

- name: bwa_mem_samtools_view_{{ sample.name }}_{{ rgid }}
  tags: [bwa, samtools, samtools-view, {{ sample.glType }}]
  input:
    - temp/fastqs/{{ r1fastq.fastqPath|basename }}
    - temp/fastqs/{{ r2fastq.fastqPath|basename }}
  walltime: "24:00:00"
  cpus: 10
  cmd: |
    set -euv
    set -o pipefail

    module load {{ constants.tools.bwa_0_7_17.module }} {{ constants.tools.samtools_1_9.module }}

    mkdir -p "temp/{{ rgid }}/"

    {{ bwa_mem(threads=9) }} \
      -R "{{ read_group_line(rg) }}" \
      "{{ constants.phoenix.bwa_index }}" \
      "temp/fastqs/{{ r1fastq.fastqPath|basename }}" \
      "temp/fastqs/{{ r2fastq.fastqPath|basename }}" |\
    samtools view \
      -O BAM \
      - \
      > "temp/{{ rgid }}/{{ rgid }}.bwa.bam"

{% endfor %}

- name: gatk_picard_markduplicates_{{ sample.name }}
  tags: [gatk, picard, picard-MarkDuplicates, {{ sample.glType }}]
  after:
    re: bwa_mem_samtools_view_{{ sample.name }}_.*
  cpus: 16
  cmd: |
    set -uev
    module load {{ constants.tools.gatk_4_1_0_0.module }}

    mkdir -p "{{ sample.glType }}/alignment/bwa/{{ sample.name }}/stats/"

    {{ markduplicates(sample)|indent(2) }} \
    {% for rgid in sample.read_groups %}
      --INPUT "temp/{{ rgid }}/{{ rgid }}.bwa.bam" \
    {% endfor %}
      --METRICS_FILE "{{ sample.glType }}/alignment/bwa/{{ sample.name }}/stats/{{ sample.name }}.mdmetrics.txt" \
      --OUTPUT "temp/{{ sample.name }}.bwa.md-uns.bam"


- name: gatk_picard_sortsam_{{ sample.name }}
  tags: [gatk, picard, picard-SortSam, {{ sample.glType }}]
  after: gatk_picard_markduplicates_{{ sample.name }}
  output: temp/{{ sample.name }}.bwa.md.bam
  cpus: 16
  cmd: |
    set -uev
    module load {{ constants.tools.gatk_4_1_0_0.module }}

    {{ sortsam()|indent(4) }} \
      --INPUT "temp/{{ sample.name }}.bwa.md-uns.bam" \
      --OUTPUT "temp/{{ sample.name }}.bwa.md.bam"

    # Cleanup the tempfiles
    {% if not debug %}
    rm "temp/{{ sample.name }}.bwa.md-uns.bam"
    {% endif %}

{% endmacro %}


# This macro splits large fastqs into chunks prior to aligning. The inputs
# and outputs are the same as above.
{% macro bwa_mem_gatk_picard_chunked(sample, reads_per_chunk) %}
{% for rgid, rg in sample.read_groups.items() %}
{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

# Calc the expected number of chunks so we can validate the output
{% set n_lines = (reads_per_chunk * 4)|int %}
{% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
{% if n_chunks > 99 %}{{ raise('ValueError', 'Too many chunks!') }}{% endif %}
{% do sample['read_groups'][rgid].update({'n_chunks': n_chunks}) %}

{% for fastq in [r1fastq, r2fastq] %}
- name: split_fastq_{{ fastq.fastqPath|basename }}
  tags: [split, {{ sample.glType }}]
  input:
    - temp/fastqs/{{ fastq.fastqPath|basename }}
  cpus: 1
  walltime: "4:00:00"
  cmd: |
    set -uev
    set -o pipefail

    rm -r "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/" || true
    mkdir -p "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/"

    zcat "temp/fastqs/{{ fastq.fastqPath|basename }}" |\
      split \
        -d \
        --suffix-length 2 \
        -l {{ n_lines }} \
        - \
        "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/"

    N_CREATED=$(ls "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/" | wc -l)

    if [[ ${N_CREATED} -ne {{ n_chunks }} ]]; then
      echo "Chunks created does not match expected value"
      exit 1
    fi

{% endfor %}

{% for i in range(n_chunks) %}
{% set chunk_suffix = '%02d' % i %}
- name: chunked_bwa_mem_samtools_view_{{ sample.name }}_{{ rgid }}_{{ chunk_suffix }}
  tags: [bwa, samtools, samtools-view, {{ sample.glType }}]
  after: 
    - split_fastq_{{ r1fastq.fastqPath|basename }}
    - split_fastq_{{ r2fastq.fastqPath|basename }}
  walltime: "24:00:00"
  cpus: 10
  cmd: |
    set -euv
    set -o pipefail

    module load {{ constants.tools.bwa_0_7_17.module }} {{ constants.tools.samtools_1_9.module }}

    {{ bwa_mem(threads=9) }} \
      -R "{{ read_group_line(rg) }}" \
      "{{ constants.phoenix.bwa_index }}" \
      "temp/{{ rgid }}/{{ r1fastq.fastqPath|basename }}/{{ chunk_suffix }}" \
      "temp/{{ rgid }}/{{ r2fastq.fastqPath|basename }}/{{ chunk_suffix }}" |\
    samtools view \
      -O BAM \
      - \
      > "temp/{{ rgid }}/{{ chunk_suffix }}.bwa.bam"

{% endfor %}
{% endfor %}

- name: chunked_gatk_picard_markduplicates_{{ sample.name }}
  tags: [gatk, picard, picard-MarkDuplicates, {{ sample.glType }}]
  after:
    re: chunked_bwa_mem_samtools_view_{{ sample.name }}_.*
  cpus: 16
  cmd: |
    set -uev
    module load {{ constants.tools.gatk_4_1_0_0.module }}

    mkdir -p "{{ sample.glType }}/alignment/bwa/{{ sample.name }}/stats/"

    {{ markduplicates(sample)|indent(2) }} \
    {% for rgid, rg in sample.read_groups.items() %}
    {% for i in range(rg['n_chunks']) %}
    {% set chunk_suffix = '%02d' % i %}
      --INPUT "temp/{{ rgid }}/{{ chunk_suffix }}.bwa.bam" \
    {% endfor %}
    {% endfor %}
      --METRICS_FILE "{{ sample.glType }}/alignment/bwa/{{ sample.name }}/stats/{{ sample.name }}.mdmetrics.txt" \
      --OUTPUT "temp/{{ sample.name }}.bwa.md-uns.bam"

    # Cleanup the tempfiles
    {% if not debug %}
    {% for rgid in sample.read_groups %}
    rm -r "temp/{{ rgid }}/"
    {% endfor %}
    {% endif %}


- name: chunked_gatk_picard_sortsam_{{ sample.name }}
  tags: [gatk, picard, picard-SortSam, {{ sample.glType }}]
  after: chunked_gatk_picard_markduplicates_{{ sample.name }}
  output: temp/{{ sample.name }}.bwa.md.bam
  cpus: 16
  cmd: |
    set -uev
    module load {{ constants.tools.gatk_4_1_0_0.module }}

    {{ sortsam()|indent(4) }} \
      --INPUT "temp/{{ sample.name }}.bwa.md-uns.bam" \
      --OUTPUT "temp/{{ sample.name }}.bwa.md.bam"
    
    # Cleanup the tempfiles
    {% if not debug %}
    rm "temp/{{ sample.name }}.bwa.md-uns.bam"
    {% endif %}


{% endmacro %}
