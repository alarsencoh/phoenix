# Aligns fastqs for a sample using BWA MEM. Samples may have multiple read
# groups.
#
#     ? ?
#   ? -----fastqs--> temp/<sample.name>.bwa.bam
#     ? ?
#
# This alignment command prefix is shared by all modules using bwa
{% from 'utilities/read_group_line.jst' import read_group_line %}

# This macro splits large fastqs into chunks prior to aligning.
# If fastq is less than reads_per_chunk (48000000) then one chunk is made.
{% macro bwa_mem_gatk_picard_chunked(sample, reads_per_chunk, opt_dup_distance) %}
{% for rgid, rg in sample.read_groups.items() %}
{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

{# Calc the expected number of chunks so we can validate the output #}
{% set n_lines = (reads_per_chunk * 4)|int %}
{% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
{% if n_chunks > 99 %}{{ raise('ValueError', 'Too many chunks!') }}{% endif %}
{% do sample['read_groups'][rgid].update({'n_chunks': n_chunks}) %}

{# Think about moving to utility scripts if tgen/broad split_fastq are the same #}
{% for fastq in [r1fastq, r2fastq] %}
- name: split_fastq_{{ fastq.fastqPath|sha256 }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, split, {{ sample.name }}]
  input:
    - temp/fastqs/{{ fastq.basename }}
  cpus: 1
  walltime: "4:00:00"
  cmd: |
    set -eu
    set -o pipefail

    rm -r "temp/{{ rgid }}/{{ fastq.basename }}/" || true
    mkdir -p "temp/{{ rgid }}/{{ fastq.basename }}/"

    zcat "temp/fastqs/{{ fastq.basename }}" |\
      split \
        -d \
        --suffix-length 2 \
        -l {{ n_lines }} \
        - \
        "temp/{{ rgid }}/{{ fastq.basename }}/"

    N_CREATED=$(ls "temp/{{ rgid }}/{{ fastq.basename }}/" | wc -l)

    if [[ ${N_CREATED} -ne {{ n_chunks }} ]]; then
      echo "Chunks created does not match expected value"
      exit 1
    fi

{% endfor %}

{% for i in range(n_chunks) %}
{% set chunk_suffix = '%02d' % i %}
- name: chunked_bwa_mem_samtools_view_{{ sample.name }}_{{ rgid }}_{{ chunk_suffix }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  after: 
    - split_fastq_{{ r1fastq.fastqPath|sha256 }}
    - split_fastq_{{ r2fastq.fastqPath|sha256 }}
  walltime: "48:00:00"
  cpus: 10
  mem: 40G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bwa.module }} {{ constants.tools.samtools_1_9.module }}

    {# No long options available for the following:
     bwa mem
        -v INT       Verbosity: 3 = message (default = 3)
        -Y           Use soft clipping for supplementary alignments
        -K INT       Process INT input bases in each batch regardless of nThreads (for reproducibility)
        -t INT       Number of threads to use
        -R STR       Read group header line such as '@RG\tID:foo\tSM:bar' [null]

     samtools view
        -o FILE      Output file name
        -            <in.bam>|<in.sam> - stdin from bwa mem stdout
    #}
    bwa mem \
      -v 3 \
      -Y \
      -K 100000000 \
      -t 9 \
      -R "{{ read_group_line(rg) }}" \
      "{{ constants.phoenix.bwa_index }}" \
      "temp/{{ rgid }}/{{ r1fastq.basename }}/{{ chunk_suffix }}" \
      "temp/{{ rgid }}/{{ r2fastq.basename }}/{{ chunk_suffix }}" |\
    samtools view \
      --output-fmt BAM \
      -o "temp/{{ rgid }}/{{ chunk_suffix }}.bwa.bam" \
      -

{% endfor %}
{% endfor %}

- name: chunked_gatk_picard_markduplicates_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, mark_duplicates, gatk, {{ sample.name }}]
  after-re: chunked_bwa_mem_samtools_view_{{ sample.name }}_.*
  walltime: "48:00:00"
  cpus: 16
  mem: 64G
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.gatk.module }}

    mkdir -p "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/stats/"

    gatk MarkDuplicates \
      --java-options "-Xmx28G" \
      --TMP_DIR "temp" \
      --ASSUME_SORT_ORDER queryname \
      --CLEAR_DT false \
      --ADD_PG_TAG_TO_READS false \
      --OPTICAL_DUPLICATE_PIXEL_DISTANCE {{ opt_dup_distance }} \
    {% for rgid, rg in sample.read_groups.items() %}
    {% for i in range(rg['n_chunks']) %}
    {% set chunk_suffix = '%02d' % i %}
      --INPUT "temp/{{ rgid }}/{{ chunk_suffix }}.bwa.bam" \
    {% endfor %}
    {% endfor %}
      --METRICS_FILE "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/stats/{{ sample.name }}.mdmetrics.txt" \
      --OUTPUT "temp/{{ sample.name }}.bwa.md-uns.bam"

    {# Cleanup the tempfiles #}
    {% if not debug %}
    {% for rgid in sample.read_groups %}
    rm -r "temp/{{ rgid }}/"
    {% endfor %}
    {% endif %}


- name: chunked_gatk_picard_sortsam_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, SortSam, gatk, {{ sample.name }}]
  after: chunked_gatk_picard_markduplicates_{{ sample.name }}
  output: temp/{{ sample.name }}.bwa.md.bam
  walltime: "48:00:00"
  cpus: 16
  mem: 64G
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.gatk.module }}

    gatk SortSam \
      --java-options "-Xmx28G" \
      --TMP_DIR "temp" \
      --SORT_ORDER "coordinate" \
      --CREATE_INDEX true \
      --CREATE_MD5_FILE true \
      --MAX_RECORDS_IN_RAM 300000 \
      --INPUT "temp/{{ sample.name }}.bwa.md-uns.bam" \
      --OUTPUT "temp/{{ sample.name }}.bwa.md.bam"
    
    {# Cleanup the tempfiles #}
    {% if not debug %}
    rm "temp/{{ sample.name }}.bwa.md-uns.bam"
    {% endif %}

{% endmacro %}
