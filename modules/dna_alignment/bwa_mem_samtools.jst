# Aligns fastqs for a sample using BWA MEM. Samples may have multiple read
# groups.
#
#     ? ?
#   ? -----fastqs--> temp/<sample.name>.bwa.bam
#     ? ?
#

# This alignment command prefix is shared by all modules using bwa
{% from 'modules/dna_alignment/bwa_mem.jst' import bwa_mem %}"}

# Markdups task is used by chunking and non-chunking alignments
{% macro samtools_markdup(sample) %}
- name: samtools_markdup_{{ sample.name }}_bwa
  tags: [samtools, markdup, {{ sample.name }}]
  methods: Duplicate reads for {{ sample.name }} were marked with
    {{ constants.tools.samtools_1_9.verbose }} markdup.
  input: temp/{{ sample.name }}.bwa.bam
  output: temp/{{ sample.name }}.bwa.md.bam
  walltime: "24:00:00"
  cpus: 8
  cmd: |
    set -euv
    module load {{ constants.tools.samtools_1_9.module }}

    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools markdup. Here, we purge any
    # existing temp files before making the directory again.
    rm -r "temp/markdup_{{ sample.name }}_bwa/" || true
    mkdir -p "temp/markdup_{{ sample.name }}_bwa/"
    mkdir -p "{{ sample.glType }}/alignment/bwa/{{ sample.name }}/stats/"

    # Input bam here is a process substituion using samtools view because
    # otherwise this command will sometimes segfault when running on the
    # output from merge.
  
    samtools markdup \
      -S \
      -s \
      --threads 4 \
      -T "temp/markdup_{{ sample.name }}_bwa/" \
      <(samtools view --threads 4 -h "temp/{{ sample.name }}.bwa.bam") \
      "temp/{{ sample.name }}.bwa.md.bam" \
      2> "{{ sample.glType }}/alignment/bwa/{{ sample.name }}/stats/{{ sample.name }}.markdup.txt"

    samtools index "temp/{{ sample.name }}.bwa.md.bam"
    rm -r "temp/markdup_{{ sample.name }}_bwa/"

{% endmacro %}

# Single alignment task per read group, no chunking
{% macro bwa_mem_samtools(sample) %}
- name: start_bwa_mem_{{ sample.name }}
  cmd: null
  methods: Fastqs for {{ sample.name }} were aligned with
    {{ constants.tools.bwa_0_7_17.verbose }}. The resulting data was streamed
    into {{ constants.tools.samtools_1_9.verbose }} fixmate and sort to
    generate a temporary aligned read group bam. Finally, all the bam chunks
    were merged together with {{ constants.tools.samtools_1_9.verbose }} merge.

{% for rgid, rg in sample.read_groups.items() %}
{% if rg.data_files|length != 2 %}
    {{ raise('This module only supports paired-end data with two fastqs per rg') }}
{% endif %}

{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
{% set rgline = '@RG\\tID:{}\\tLB:{}\\tPU:{}\\tSM:{}\\tPL:{}\\tCN:{}\\tPM:{}\\tKS:{}'.format(
  rgid, rg.rglb, rg.rgpu, rg.rgsm, rg.rgpl, rg.rgcn, rg.rgpm, (rg.rgks or 'unknown')) %}

- name: copy_fastqs_{{ sample.name }}_{{ rgid }}
  after: start_bwa_mem_{{ sample.name }}
  tags: [rsync, {{ sample.name }}, {{ rgid }}]
  retry: 2
  cpus: 1
  walltime: "1:00:00"
  cmd: |
    set -uev

    mkdir -p temp/fastqs/

    rsync_from_isilon "{{ r1fastq.fastqPath }}" "temp/fastqs/"
    rsync_from_isilon "{{ r2fastq.fastqPath }}" "temp/fastqs/"


- name: bwa_mem_{{ sample.name }}_{{ rgid }}
  tags: [bwa, samtools, {{ sample.name }}, {{ rgid }}]
  after: copy_fastqs_{{ sample.name }}_{{ rgid }}
  walltime: "8:00:00"
  cpus: 10
  cmd: |
    set -euv
    set -o pipefail

    module load {{ constants.tools.bwa_0_7_17.module }} {{ constants.tools.samtools_1_9.module }}

    mkdir -p "temp/{{ rgid }}/"

    {{ bwa_mem() }}
      -R "{{ rgline }}" \
      "{{ constants.phoenix.reference_index_prefix }}" \
      "temp/fastqs/{{ r1fastq.fastqPath|basename }}" \
      "temp/fastqs/{{ r2fastq.fastqPath|basename }}" |\
    samtools sort \
      -l 5 \
      -m 1G \
      -@ 9 \
      -O BAM \
      - \
      -o "temp/{{ rgid }}/{{ rgid }}.bwa.bam"

{% endfor %}


- name: samtools_merge_rg_bams_{{ sample.name }}_bwa
  tags: [samtools, merge, {{ sample.name }}]
  after:
    re: bwa_mem_{{ sample.name }}_.*
  output: temp/{{ sample.name }}.bwa.bam
  walltime: "24:00:00"
  cpus: 4
  cmd: |
    set -uev
    module load {{ constants.tools.samtools_1_9.module }}

    {% if sample.read_groups | length > 1 %}

    samtools merge \
      -c \
      -f "temp/{{ sample.name }}.bwa.bam" \
    {% for rgid in sample.read_groups %}
      "temp/{{ rgid }}/{{ rgid }}.bwa.bam" \
    {% endfor %}

    {% else %}
    
    # No merging needed for <= 1 read group not split
    mv \
      "temp/{{ rgid }}/{{ rgid }}.bwa.bam" \
      "temp/{{ sample.name }}.bwa.bam"

    {% endif %}

    # Cleanup the tempfiles
    {% if not debug %}
    {% for rgid in sample.read_groups %}
    rm -r "temp/{{ rgid }}/"
    {% endfor %}
    {% endif %}


{{- samtools_markdup(sample) }}

{% endmacro %}


# This macro splits large fastqs into chunks prior to aligning. The inputs
# and outputs are the same as above.
{% macro bwa_mem_samtools_chunked(sample, reads_per_chunk) %}
- name: start_bwa_mem_{{ sample.name }}
  cmd: null
  methods: Fastqs for {{ sample.name }} were split into chunks no larger
    than {{ reads_per_chunk}}, then aligned with
    {{ constants.tools.bwa_0_7_17.verbose }}. The resulting data was streamed
    into {{ constants.tools.samtools_1_9.verbose }} fixmate and sort to
    generate a temporary aligned read group bam. Finally, all the bam chunks
    were merged together with {{ constants.tools.samtools_1_9.verbose }} merge.

{% for rgid, rg in sample.read_groups.items() %}
{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
{% set rgline = '@RG\\tID:{}\\tLB:{}\\tPU:{}\\tSM:{}\\tPL:{}\\tCN:{}\\tPM:{}\\tKS:{}'.format(
    rgid, rg.rglb, rg.rgpu, rg.rgsm, rg.rgpl, rg.rgcn, rg.rgpm, (rg.rgks or 'unknown')) %}

- name: copy_fastqs_{{ sample.name }}_{{ rgid }}
  after: start_bwa_mem_{{ sample.name }}
  retry: 2
  cpus: 1
  walltime: "1:00:00"
  cmd: |
    set -uev

    mkdir -p temp/fastqs/

    rsync_from_isilon {{ r1fastq.fastqPath }} temp/fastqs/
    rsync_from_isilon {{ r2fastq.fastqPath }} temp/fastqs/


{% set n_lines = (reads_per_chunk * 4)|int %}
{% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
{% if n_chunks > 99 %}{{ raise('ValueError', 'Too many chunks!') }}{% endif %}

{% for fastq in [r1fastq, r2fastq] %}
- name: split_fastq_{{ fastq.fastqPath|basename }}
  after: copy_fastqs_{{ sample.name }}_{{ rgid }}
  cpus: 1
  walltime: "4:00:00"
  cmd: |
    set -uev
    set -o pipefail

    rm -r "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/" || true
    mkdir -p "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/"

    zcat "temp/fastqs/{{ fastq.fastqPath|basename }}" |\
      split \
        -d \
        --suffix-length 2 \
        -l {{ n_lines }} \
        - \
        "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/"

    N_CREATED=$(ls "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/" | wc -l)

    if [[ ${N_CREATED} -ne {{ n_chunks }} ]]; then
      echo "Chunks created does not match expected value"
      exit 1
    fi

{% endfor %}

{% for i in range(n_chunks) %}
{% set chunk_suffix = '%02d' % i %}
- name: bwa_mem_{{ sample.name }}_{{ rgid }}_{{ chunk_suffix }}
  after: 
    - split_fastq_{{ r1fastq.fastqPath|basename }}
    - split_fastq_{{ r2fastq.fastqPath|basename }}
  walltime: "24:00:00"
  cpus: 10
  cmd: |
    set -euv
    set -o pipefail

    module load {{ constants.tools.bwa_0_7_17.module }} {{ constants.tools.samtools_1_9.module }}

    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools sort. Here, we purge any
    # existing temp files before making the directory again.
    rm -r "temp/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/" || true
    mkdir -p "temp/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/"

    {{ bwa_mem() }}
      -R "{{ rgline }}" \
      "{{ constants.phoenix.reference_index_prefix }}" \
      "temp/{{ rgid }}/{{ r1fastq.fastqPath|basename }}/{{ chunk_suffix }}" \
      "temp/{{ rgid }}/{{ r2fastq.fastqPath|basename }}/{{ chunk_suffix }}" |\
    samtools sort \
      -T "temp/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/" \
      -l 5 \
      -m 1G \
      -@ 9 \
      -O BAM \
      - \
      -o "temp/{{ rgid }}/{{ chunk_suffix }}.bwa.bam"

{% endfor %}
{% endfor %}

- name: merge_bam_chunks_{{ sample.name }}
  after:
    re: bwa_mem_{{ sample.name }}_.*
  output: temp/{{ sample.name }}.bwa.bam
  walltime: "24:00:00"
  cpus: 4
  cmd: |
    set -uev
    module load {{ constants.tools.samtools_1_7.module }}

    samtools merge \
      -c \
      -f "temp/{{ sample.name }}.bwa.bam" \
    {% for rgid in sample.read_groups %}
      "temp/{{ rgid }}/"*.bwa.bam \
    {% endfor %}

    {% if not debug %}
    # Cleanup the tempfiles
    {% for rgid in sample.read_groups %}
    rm -r "temp/{{ rgid }}/"
    {% endfor %}
    {% endif %}


{{- samtools_markdup(sample) }}

{% endmacro %}

