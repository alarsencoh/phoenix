# Aligns fastqs for a sample using BWA MEM. Samples may have multiple read
# groups.
#
#     ? ?
#   ? -----fastqs--> temp/<sample.name>.bwa.bam
#     ? ?
#

# This alignment command prefix is shared by all modules using bwa
{% from 'modules/dna_alignment/bwa_mem.jst' import bwa_mem %}
{% from 'modules/read_group_line.jst' import read_group_line %}

# Markdups task is used by chunking and non-chunking alignments
{% macro samtools_markdup(sample) %}
- name: samtools_markdup_{{ sample.name }}_bwa
  tags: [samtools, samtools-markdup, {{ sample.glType }}]
  methods: Duplicate reads for {{ sample.name }} were marked with
    {{ constants.tools.samtools_1_9_65_g1b72f1a.verbose }} markdup.
  input: temp/{{ sample.name }}.bwa.bam
  output: temp/{{ sample.name }}.bwa.md.bam
  walltime: "24:00:00"
  cpus: 16
  cmd: |
    set -euv
    module load {{ constants.tools.samtools_1_9_65_g1b72f1a.module }}

    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools markdup. Here, we purge any
    # existing temp files before making the directory again.
    rm -r "temp/markdup_{{ sample.name }}_bwa/" || true
    mkdir -p "temp/markdup_{{ sample.name }}_bwa/"
    mkdir -p "{{ sample.glType }}/alignment/bwa/{{ sample.name }}/stats/"

    samtools markdup \
      -S \
      -s \
      --threads 4 \
      -T "temp/markdup_{{ sample.name }}_bwa/" \
      "temp/{{ sample.name }}.bwa.bam" \
      "temp/{{ sample.name }}.bwa.md.bam" \
      2> "{{ sample.glType }}/alignment/bwa/{{ sample.name }}/stats/{{ sample.name }}.bwa.bam.markdup.txt"

    samtools index "temp/{{ sample.name }}.bwa.md.bam"
    rm -r "temp/markdup_{{ sample.name }}_bwa/"

{% endmacro %}

# Single alignment task per read group, no chunking
{% macro bwa_mem_samtools(sample) %}
{% for rgid, rg in sample.read_groups.items() %}
{% if rg.data_files|length != 2 %}
    {{ raise('Read group did not have 2 data files: {}'.format(rgid)) }}
{% endif %}

{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

- name: bwa_mem_samtools_fixmate_{{ sample.name }}_{{ rgid }}
  tags: [bwa, samtools, samtools-fixmate, samtools-sort, {{ sample.glType }}]
  input:
    - temp/fastqs/{{ r1fastq.fastqPath|basename }}
    - temp/fastqs/{{ r2fastq.fastqPath|basename }}
  walltime: "8:00:00"
  cpus: 10
  cmd: |
    set -euv
    set -o pipefail

    module load {{ constants.tools.bwa_0_7_17.module }} {{ constants.tools.samtools_1_9.module }}

    mkdir -p "temp/{{ rgid }}/"

    {{ bwa_mem(threads=9) }} \
      -R "{{ read_group_line(rg, format='bwa') }}" \
      "{{ constants.phoenix.bwa_index }}" \
      "temp/fastqs/{{ r1fastq.fastqPath|basename }}" \
      "temp/fastqs/{{ r2fastq.fastqPath|basename }}" |\
    samtools fixmate \
      --threads 9 \
      -m \
      - \
      - |\
    samtools sort \
      -l 5 \
      -m 1G \
      --threads 9 \
      -O BAM \
      - \
      -o "temp/{{ rgid }}/{{ rgid }}.bwa.bam"

{% endfor %}


- name: samtools_merge_rg_bams_{{ sample.name }}_bwa
  tags: [samtools, samtools-merge, {{ sample.glType }}]
  after-re: bwa_mem_samtools_fixmate_{{ sample.name }}_.*
  output: temp/{{ sample.name }}.bwa.bam
  walltime: "24:00:00"
  cpus: 4
  cmd: |
    set -uev
    module load {{ constants.tools.samtools_1_9.module }}

    {% if sample.read_groups | length > 1 %}

    samtools merge \
      --threads 4 \
      -c \
      -f "temp/{{ sample.name }}.bwa.bam" \
    {% for rgid in sample.read_groups %}
      "temp/{{ rgid }}/{{ rgid }}.bwa.bam" \
    {% endfor %}

    {% else %}
    {% set rgid = sample.read_groups|first %}
    # No merging needed for <= 1 read group not split
    mv \
      "temp/{{ rgid }}/{{ rgid }}.bwa.bam" \
      "temp/{{ sample.name }}.bwa.bam"

    {% endif %}

    # Cleanup the tempfiles
    {% if not debug %}
    {% for rgid in sample.read_groups %}
    rm -r "temp/{{ rgid }}/"
    {% endfor %}
    {% endif %}


{{- samtools_markdup(sample) }}

{% endmacro %}


# This macro splits large fastqs into chunks prior to aligning. The inputs
# and outputs are the same as above.
{% macro bwa_mem_samtools_chunked(sample, reads_per_chunk) %}
{% for rgid, rg in sample.read_groups.items() %}
{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

{% set n_lines = (reads_per_chunk * 4)|int %}
{% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
{% if n_chunks > 99 %}{{ raise('ValueError', 'Too many chunks!') }}{% endif %}

{% for fastq in [r1fastq, r2fastq] %}
- name: split_fastq_{{ fastq.fastqPath|sha256 }}
  tags: [split, {{ sample.glType }}]
  input:
    - temp/fastqs/{{ fastq.fastqPath|basename }}
  cpus: 1
  walltime: "4:00:00"
  cmd: |
    set -uev
    set -o pipefail

    rm -r "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/" || true
    mkdir -p "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/"

    zcat "temp/fastqs/{{ fastq.fastqPath|basename }}" |\
      split \
        -d \
        --suffix-length 2 \
        -l {{ n_lines }} \
        - \
        "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/"

    N_CREATED=$(ls "temp/{{ rgid }}/{{ fastq.fastqPath|basename }}/" | wc -l)

    if [[ ${N_CREATED} -ne {{ n_chunks }} ]]; then
      echo "Chunks created does not match expected value"
      exit 1
    fi

{% endfor %}

{% for i in range(n_chunks) %}
{% set chunk_suffix = '%02d' % i %}
- name: chunked_bwa_mem_samtools_fixmate_{{ sample.name }}_{{ rgid }}_{{ chunk_suffix }}
  tags: [bwa, bwa-mem, samtools-fixmate, samtools-sort, {{ sample.glType }}]
  after: 
    - split_fastq_{{ r1fastq.fastqPath|sha256 }}
    - split_fastq_{{ r2fastq.fastqPath|sha256 }}
  walltime: "24:00:00"
  cpus: 10
  cmd: |
    set -euv
    set -o pipefail

    module load {{ constants.tools.bwa_0_7_17.module }} {{ constants.tools.samtools_1_9.module }}

    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools sort. Here, we purge any
    # existing temp files before making the directory again.
    rm -r "temp/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/" || true
    mkdir -p "temp/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/"

    {{ bwa_mem(threads=9) }} \
      -R "{{ read_group_line(rg, format='bwa') }}" \
      "{{ constants.phoenix.bwa_index }}" \
      "temp/{{ rgid }}/{{ r1fastq.fastqPath|basename }}/{{ chunk_suffix }}" \
      "temp/{{ rgid }}/{{ r2fastq.fastqPath|basename }}/{{ chunk_suffix }}" |\
    samtools fixmate \
      --threads 9 \
      -m \
      - \
      - |\
    samtools sort \
      -T "temp/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/" \
      -l 5 \
      -m 1G \
      --threads 9 \
      -O BAM \
      - \
      -o "temp/{{ rgid }}/{{ chunk_suffix }}.bwa.bam"

{% endfor %}
{% endfor %}

- name: chunked_samtools_merge_rg_bams_{{ sample.name }}
  tags: [samtools, samtools-merge, {{ sample.glType }}]
  after-re: chunked_bwa_mem_samtools_fixmate_{{ sample.name }}_.*
  output: temp/{{ sample.name }}.bwa.bam
  walltime: "24:00:00"
  cpus: 4
  cmd: |
    set -uev
    module load {{ constants.tools.samtools_1_7.module }}

    samtools merge \
      --threads 4 \
      -c \
      -f "temp/{{ sample.name }}.bwa.bam" \
    {% for rgid in sample.read_groups %}
      "temp/{{ rgid }}/"*.bwa.bam \
    {% endfor %}

    # Cleanup the tempfiles
    {% if not debug %}
    {% for rgid in sample.read_groups %}
    rm -r "temp/{{ rgid }}/"
    {% endfor %}
    {% endif %}


{{- samtools_markdup(sample) }}

{% endmacro %}

