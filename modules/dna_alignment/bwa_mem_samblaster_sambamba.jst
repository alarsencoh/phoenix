# Aligns fastqs for a sample using BWA MEM. Samples may have multiple read
# groups.
#
#     ? ?
#   ? -----fastqs--> temp/<sample.name>.bwa.bam
#     ? ?
#

# This alignment command prefix is shared by all modules using bwa
{% from 'utilities/read_group_line.jst' import read_group_line %}

# Replicating the exact workflow from Ashion into jst format

{% macro bwa_mem_blaster_bamba(sample) %}

{% set r_flag %}@RG\\tID:{{ sample.rglb }}\\tSM:{{ sample.rgsm|default(sample.name) }}\\tLB:{{ sample.rglb }}\\tPL:ILLUMINA\\tCN:TGen{% endset %}
{% set fastqs_to_depend = [] %}
{% set r1fastqs = [] %}
{% set r2fastqs = [] %}

{% for rgid, rg in sample.read_groups.items() %}
  {% if rg.data_files|length != 2 %}
      {{ raise('Read group did not have 2 data files: {}'.format(rgid)) }}
  {% endif %}

  {% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
  {% set r1fastq %}"temp/fastqs/{{ r1fastq.basename }}"{% endset %}
  {% do r1fastqs.append(r1fastq) %}
  {% do fastqs_to_depend.append(r1fastq) %}

  {% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}
  {% set r2fastq %}"temp/fastqs/{{ r2fastq.basename }}"{% endset %}
  {% do r2fastqs.append(r2fastq) %}
  {% do fastqs_to_depend.append(r2fastq) %}
{% endfor %}


- name: cat_fastqs_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  input:
  {% for fastq in fastqs_to_depend %}
    - {{ fastq }}
  {% endfor %}
  walltime: "24:00:00"
  cpus: 1
  mem: 2G
  cmd: |
    set -eu
    set -o pipefail
    mkdir -p "temp/{{ sample.rglb }}"

    cat {{ r1fastqs|join(' ') }} > temp/{{ sample.rglb }}/{{ sample.rglb }}_R1_merged.fastq.gz
    cat {{ r2fastqs|join(' ') }} > temp/{{ sample.rglb }}/{{ sample.rglb }}_R2_merged.fastq.gz


- name: bwa_mem_samblaster_sambamba_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, mark_duplicates, bwa, samblaster, sambamba, {{ sample.name }}]
  after: cat_fastqs_{{ sample.name }}
  output: temp/{{ sample.name }}.bwa.md.bam
  walltime: "48:00:00"
  cpus: 10
  mem: 40G
  cmd: |
    set -eu
    set -o pipefail
    module load {{ constants.tools.bwa_0_7_17.module }}
    module load {{ constants.tools.samblaster_0_1_24.module }}
    module load {{ constants.tools.sambamba_0_7_0.module }}

    {# No long options available for the following:
     bwa mem
        -v INT       Verbosity: 3 = message (default = 3)
        -Y           Use soft clipping for supplementary alignments
        -K INT       Process INT input bases in each batch regardless of nThreads (for reproducibility)
        -t INT       Number of threads to use
        -R STR       Read group header line such as '@RG\tID:foo\tSM:bar' [null]

     samblaster      No options set, reads directly from stdout of bwamem
    #}
    bwa mem \
      -v 3 \
      -Y \
      -K 100000000 \
      -t 9 \
      -R "{{ r_flag }}" \
      "{{ constants.phoenix.bwa_index }}" \
      temp/{{ sample.rglb }}/{{ sample.rglb }}_R1_merged.fastq.gz \
      temp/{{ sample.rglb }}/{{ sample.rglb }}_R2_merged.fastq.gz |\
    samblaster |\
    sambamba view \
      --format bam \
      --compression-level 0 \
      --sam-input /dev/stdin |\
    sambamba sort \
      --memory-limit 20GB \
      --nthreads 9 \
      --tmpdir "temp/{{ sample.rglb }}/" \
      /dev/stdin \
      --out "temp/{{ sample.name }}.bwa.md.bam"


{% endmacro %}
