# Aligns fastqs for a sample using BWA MEM2. Samples may have multiple read
# groups.
#
#     ? ?
#   ? -----fastqs--> temp/<sample.name>.bwa.bam
#     ? ?
#

# This alignment command prefix is shared by all modules using bwa
{% from 'utilities/read_group_line.jst' import read_group_line with context %}
{% from 'utilities/remove_files.jst' import remove_files with context %}

# This macro splits large fastqs into chunks prior to aligning.
# If fastq is less than reads_per_chunk (48000000) then one chunk is made.
{% macro bwa_mem2_samtools_chunked(sample, reads_per_chunk, opt_dup_distance) %}
{% for rgid, rg in sample.read_groups.items() %}
{% set r1fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R1')|first %}
{% set r2fastq = rg.data_files|selectattr('fastqCode', 'eq', 'R2')|first %}

{# Comment about the math, using the assumed legacy illumina interpretation, it is a TGen modification #}
{% set n_lines = (reads_per_chunk * 4)|int %}
{% set n_chunks = (r1fastq.numberOfReads / 2 / reads_per_chunk)|round(0, method='ceil')|int %}
{% if n_chunks > 99 %}{{ raise('ValueError', 'Too many chunks!') }}{% endif %}

{% for fastq in [r1fastq, r2fastq] %}
- name: split_fastq_{{ fastq.basename | replace(".", "_") }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, split, {{ sample.name }}]
  reset: predecessors
  input:
    - temp/fastqs/{{ fastq.basename }}
  cpus: 1
  walltime: "4:00:00"
  cmd: |
    set -eu
    set -o pipefail

    rm -r "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ fastq.basename }}/" || true
    mkdir -p "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ fastq.basename }}/"

    zcat "temp/fastqs/{{ fastq.basename }}" |\
      split \
        --numeric-suffixes \
        --suffix-length 2 \
        --lines {{ n_lines }} \
        - \
        "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ fastq.basename }}/"

    N_CREATED=$(ls "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ fastq.basename }}/" | wc -l)

    if [[ ${N_CREATED} -ne {{ n_chunks }} ]]
    then
      echo "Chunks created does not match expected value"
      exit 1
    fi

{% endfor %}

{% for i in range(n_chunks) %}
{% set chunk_suffix = '%02d' % i %}
- name: chunked_bwa_mem2_samtools_fixmate_{{ sample.name }}_{{ rgid }}_{{ chunk_suffix }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  reset: predecessors
  after:
    - split_fastq_{{ r1fastq.basename | replace(".", "_") }}
    - split_fastq_{{ r2fastq.basename | replace(".", "_") }}
  output: temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ chunk_suffix }}.bwa.bam
  walltime: "48:00:00"
  cpus: 10
  mem: 50G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bwa_mem2.module }}
    module load {{ constants.tools.samtools.module }}

    {#
    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools sort. Here, we purge any
    # existing temp files before making the directory again.
    #}
    rm -r "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/" || true
    mkdir -p "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/"

    {# No long options available for the following:
     bwa mem
        -v INT       Verbosity: 3 = message (default = 3)
        -Y           Use soft clipping for supplementary alignments
        -K INT       Process INT input bases in each batch regardless of nThreads (for reproducibility)
        -t INT       Number of threads to use
        -R STR       Read group header line such as '@RG\tID:foo\tSM:bar' [null]

     samtools fixmate
        -m           Add mate score tag, REQUIRED for samtools markdup
        -            Input from stdin
        -            Output to stdout

     samtools sort
        -l INT       Set compression level, from 0 (uncompressed) to 9 (best)
        -m INT       Set maximum memory per thread; suffix K/M/G recognized [768M]
        -T PREFIX    Write temporary files to PREFIX.nnnn.bam
        -            Input from stdin
        -o FILE      Write final output to FILE rather than standard output
    #}
    bwa-mem2 mem \
      -v 3 \
      -Y \
      -K 100000000 \
      -t 9 \
      -R "{{ read_group_line(rg, format='bwa') }}" \
      "{{ constants.phoenix.bwa_mem2_index }}" \
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ r1fastq.basename }}/{{ chunk_suffix }}" \
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ r2fastq.basename }}/{{ chunk_suffix }}" |\
    samtools fixmate \
      --threads 1 \
      -m \
      - \
      - |\
    samtools sort \
      -T "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ chunk_suffix }}_st_sort_temp/{{ chunk_suffix }}" \
      -l 2 \
      -m 3G \
      --threads 9 \
      --output-fmt BAM \
      -o "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ chunk_suffix }}.bwa.bam" \
      -

{% endfor %}

- name: chunked_samtools_merge_rgid_bams_{{ sample.name }}_{{ rgid }}
  tags: [{{ sample.gltype }}, alignment, dna_alignment, bwa, {{ sample.name }}]
  reset: predecessors
  input:
    {% for i in range(n_chunks) %}
    {% set chunk_suffix = '%02d' % i %}
    - temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ chunk_suffix }}.bwa.bam
    {% endfor %}
  output: temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.bam
  walltime: "24:00:00"
  cpus: 8
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.samtools.module }}

    {# No long options available for the following:
      -c           Combine @RG headers with colliding IDs [alter IDs to be distinct]
      -f           Overwrite the output BAM if exist
      -l INT       Compression level, from 0 to 9 [-1]
    #}
    samtools merge \
      --threads 8 \
      -c \
      -f \
      -l 6 \
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.bam" \
      {% for i in range(n_chunks) %}
      {% set chunk_suffix = '%02d' % i %}
      {% if not loop.last %}
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ chunk_suffix }}.bwa.bam" \
      {% else %}
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/{{ chunk_suffix }}.bwa.bam"
      {% endif %}
      {% endfor %}

    {# Cleanup the tempfiles
    # removes fastq chunks and intermediate chunk bam files
    #}
    {% if not debug %}
    rm -r "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ rgid }}/"
    {% endif %}


- name: samtools_markdup_{{ sample.name }}_{{ rgid }}_bwa
  tags: [{{ sample.gltype }}, alignment, mark_duplicates, samtools, {{ sample.name }}]
  reset: predecessors
  methods: Duplicate reads for {{ sample.name }} were marked with
    {{ constants.tools.samtools.verbose }} markdup.
  input: temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.bam
  output:
    - temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.md.bam
    - {{ sample.gltype }}/alignment/bwa/{{ sample.name }}/stats/{{ sample.name }}_{{ rgid }}.bwa.bam.samtools.markdup.txt
  walltime: "48:00:00"
  cpus: 4
  mem: 16G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.samtools.module }}

    {#
    # If this task was interrupted previously, temp files may exist
    # that will cause errors with samtools markdup. Here, we purge any
    # existing temp files before making the directory again.
    #}
    rm -r "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/markdup_temp/" || true
    mkdir -p "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/markdup_temp/"
    mkdir -p "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/stats/"

    {# No long options available for the following:
     -d      Optical distance
     -S      Mark supplemenary alignments of duplicates as duplicates (slower)
     -f      Write stats to named file. Implies -s (report stats)
     -T      PREFIX    Write temporary files to PREFIX.samtools.nnnn.nnnn.tmp
     2>      Stats are output to stderr which is redirected to ".bwa.bam.markdup.txt"
    #}
    samtools markdup \
      -d {{ opt_dup_distance }} \
      -S \
      -f "{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/stats/{{ sample.name }}_{{ rgid }}.bwa.bam.samtools.markdup.txt" \
      --threads 4 \
      --write-index \
      -T "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/markdup_temp/{{ sample.name }}_{{ rgid }}" \
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.bam" \
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.md.bam"

{% endfor %}

- name: samtools_markdup_merge_rg_bams_{{ sample.name }}
  tags: [{{ sample.gltype }}, alignment, mark_duplicates, samtools, {{ sample.name }}]
  reset: predecessors
  methods: Duplicate reads for {{ sample.name }} were marked with
    {{ constants.tools.samtools.verbose }} markdup.
  input:
    {% for rgid in sample.read_groups %}
    - temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.md.bam
    {% endfor %}
  output:
    - temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}.bwa.md.bam
  walltime: "48:00:00"
  cpus: 8
  mem: 16G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.samtools.module }}

    {# No long options available for the following:
      -c           Combine @RG headers with colliding IDs [alter IDs to be distinct]
      -f           Overwrite the output BAM if exist
      -l INT       Compression level, from 0 to 9 [-1]
    #}
    samtools merge \
      --threads 8 \
      -c \
      -f \
      -l 6 \
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}.bwa.md.bam" \
    {% for rgid in sample.read_groups %}
      {% if not loop.last %}
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.md.bam" \
      {% else %}
      "temp/{{ sample.gltype }}/alignment/bwa/{{ sample.name }}/{{ sample.name }}_{{ rgid }}.bwa.md.bam"
      {% endif %}
    {% endfor %}

{% endmacro %}
